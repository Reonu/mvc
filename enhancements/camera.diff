diff --git a/src/game/behaviors/intro_lakitu.inc.c b/src/game/behaviors/intro_lakitu.inc.c
index 7b12a651..4fd87d63 100644
--- a/src/game/behaviors/intro_lakitu.inc.c
+++ b/src/game/behaviors/intro_lakitu.inc.c
@@ -10,31 +10,9 @@
  * set lakitu's location.
  */
 void intro_lakitu_set_offset_from_camera(struct Object *o, Vec3f offset) {
-    f32 dist;
-    Vec3s focusAngles;
-    s16 offsetPitch, offsetYaw;
-
-    vec3f_add(offset, gCamera->pos);
-    vec3f_get_dist_and_angle(gCamera->pos, gCamera->focus,
-                             &dist, &focusAngles[0], &focusAngles[1]);
-    vec3f_get_dist_and_angle(gCamera->pos, offset, &dist, &offsetPitch, &offsetYaw);
-    vec3f_set_dist_and_angle(gCamera->pos, offset, dist,
-                             focusAngles[0] + offsetPitch, focusAngles[1] + offsetYaw);
-    vec3f_to_object_pos(o, offset);
 }
 
 void intro_lakitu_set_focus(struct Object *o, Vec3f newFocus) {
-    UNUSED Vec3f unusedVec3f;
-    Vec3f origin;
-    f32 dist;
-    s16 pitch, yaw;
-    UNUSED u32 unused;
-
-    // newFocus is an offset from lakitu's origin, not a point in the world.
-    vec3f_set(origin, 0.f, 0.f, 0.f);
-    vec3f_get_dist_and_angle(origin, newFocus, &dist, &pitch, &yaw);
-    o->oFaceAnglePitch = pitch;
-    o->oFaceAngleYaw = yaw;
 }
 
 /**
@@ -43,184 +21,9 @@ void intro_lakitu_set_focus(struct Object *o, Vec3f newFocus) {
  */
 s32 intro_lakitu_set_pos_and_focus(struct Object *o, struct CutsceneSplinePoint offset[],
                                    struct CutsceneSplinePoint focus[]) {
-    Vec3f newOffset, newFocus;
-    s32 splineFinished = 0;
-    s16 splineSegment = o->oIntroLakituSplineSegment;
-
-    if ((move_point_along_spline(newFocus, offset, &splineSegment, &(o->oIntroLakituSplineSegmentProgress)) == 1)
-        || (move_point_along_spline(newOffset, focus, &splineSegment, &(o->oIntroLakituSplineSegmentProgress)) == 1))
-        splineFinished += 1;
-
-    o->oIntroLakituSplineSegment = splineSegment;
-    intro_lakitu_set_offset_from_camera(o, newOffset);
-    intro_lakitu_set_focus(o, newFocus);
-    return splineFinished;
+    return 0;
 }
 
 void bhv_intro_lakitu_loop(void) {
-    Vec3f sp64, sp58, sp4C;
-    UNUSED u32 pad[4];
-
-    switch (gCurrentObject->oAction) {
-        case 0:
-            cur_obj_disable_rendering();
-            gCurrentObject->oIntroLakituSplineSegment = 0.f;
-            gCurrentObject->oIntroLakituSplineSegmentProgress = 0.f;
-            gCurrentObject->oIntroLakituCloud =
-                spawn_object_relative_with_scale(1, 0, 0, 0, 2.f, gCurrentObject, MODEL_MIST, bhvCloud);
-            if (gCamera->cutscene == CUTSCENE_END_WAVING)
-                gCurrentObject->oAction = 100;
-            else
-                gCurrentObject->oAction += 1;
-            break;
-
-        case 1:
-            cur_obj_enable_rendering();
-            if ((gCutsceneTimer > 350) && (gCutsceneTimer < 458)) {
-                gCurrentObject->oPosX = gCamera->pos[0];
-                gCurrentObject->oPosY = gCamera->pos[1] + 500.f;
-                gCurrentObject->oPosZ = gCamera->pos[2];
-            }
-            if (gCutsceneTimer > 52)
-                cur_obj_play_sound_1(SOUND_AIR_LAKITU_FLY_HIGHPRIO);
-
-            if (intro_lakitu_set_pos_and_focus(gCurrentObject, gIntroLakituStartToPipeOffsetFromCamera,
-                                               gIntroLakituStartToPipeFocus) == 1)
-                gCurrentObject->oAction += 1;
-
-            switch (gCurrentObject->oTimer) {
-#if defined(VERSION_US) || defined(VERSION_SH)
-                case 534:
-                    cur_obj_play_sound_2(SOUND_ACTION_FLYING_FAST);
-                    break;
-                case 581:
-                    cur_obj_play_sound_2(SOUND_ACTION_INTRO_UNK45E);
-                    break;
-#endif
-                case 73:
-                    gCurrentObject->oAnimState += 1;
-                    break;
-                case 74:
-                    gCurrentObject->oAnimState -= 1;
-                    break;
-                case 82:
-                    gCurrentObject->oAnimState += 1;
-                    break;
-                case 84:
-                    gCurrentObject->oAnimState -= 1;
-                    break;
-            }
-#ifdef VERSION_EU
-            if (gCurrentObject->oTimer == 446)
-                cur_obj_play_sound_2(SOUND_ACTION_FLYING_FAST);
-            if (gCurrentObject->oTimer == 485)
-                cur_obj_play_sound_2(SOUND_ACTION_INTRO_UNK45E);
-#endif
-            break;
-        case 2:
-#ifdef VERSION_EU
-            if (gCutsceneTimer > 599) {
-#else
-            if (gCutsceneTimer > 720) {
-#endif
-                gCurrentObject->oAction += 1;
-                gCurrentObject->oIntroLakituUnk100 = 1400.f;
-                gCurrentObject->oIntroLakituUnk104 = -4096.f;
-                gCurrentObject->oIntroLakituUnk108 = 2048.f;
-                gCurrentObject->oIntroLakituUnk10C = -200.f;
-                gCurrentObject->oMoveAngleYaw = 0x8000;
-                gCurrentObject->oFaceAngleYaw = gCurrentObject->oMoveAngleYaw + 0x4000;
-                gCurrentObject->oMoveAnglePitch = 0x800;
-            }
-            cur_obj_play_sound_1(SOUND_AIR_LAKITU_FLY_HIGHPRIO);
-            break;
-
-        case 3:
-            cur_obj_play_sound_1(SOUND_AIR_LAKITU_FLY_HIGHPRIO);
-            vec3f_set(sp58, -1128.f, 560.f, 4664.f);
-            gCurrentObject->oMoveAngleYaw += 0x200;
-            gCurrentObject->oIntroLakituUnk100 =
-                approach_f32_asymptotic(gCurrentObject->oIntroLakituUnk100, 100.f, 0.03f);
-            gCurrentObject->oFaceAnglePitch = atan2s(200.f, gCurrentObject->oPosY - 400.f);
-            gCurrentObject->oFaceAngleYaw = approach_s16_asymptotic(
-                gCurrentObject->oFaceAngleYaw, gCurrentObject->oMoveAngleYaw + 0x8000, 4);
-            vec3f_set_dist_and_angle(sp58, sp4C, gCurrentObject->oIntroLakituUnk100, 0,
-                                     gCurrentObject->oMoveAngleYaw);
-            sp4C[1] += 150.f * coss((s16) gCurrentObject->oIntroLakituUnk104);
-            gCurrentObject->oIntroLakituUnk104 += gCurrentObject->oIntroLakituUnk108;
-            gCurrentObject->oIntroLakituUnk108 =
-                approach_f32_asymptotic(gCurrentObject->oIntroLakituUnk108, 512.f, 0.05f);
-            sp4C[0] += gCurrentObject->oIntroLakituUnk10C;
-            gCurrentObject->oIntroLakituUnk10C =
-                approach_f32_asymptotic(gCurrentObject->oIntroLakituUnk10C, 0.f, 0.05f);
-            vec3f_to_object_pos(gCurrentObject, sp4C);
-
-            if (gCurrentObject->oTimer == 31) {
-                gCurrentObject->oPosY -= 158.f;
-                // Spawn white ground particles
-                spawn_mist_from_global();
-                gCurrentObject->oPosY += 158.f;
-            }
-#ifdef VERSION_EU
-#define TIMER 74
-#else
-#define TIMER 98
-#endif
-
-            if (gCurrentObject->oTimer == TIMER) {
-                obj_mark_for_deletion(gCurrentObject);
-                obj_mark_for_deletion(gCurrentObject->oIntroLakituCloud);
-            }
-#ifndef VERSION_JP
-            if (gCurrentObject->oTimer == 14)
-                cur_obj_play_sound_2(SOUND_ACTION_INTRO_UNK45F);
-#endif
-            break;
-        case 100:
-            cur_obj_enable_rendering();
-            vec3f_set(sp64, -100.f, 100.f, 300.f);
-            offset_rotated(sp4C, gCamera->pos, sp64, sMarioCamState->faceAngle);
-            vec3f_to_object_pos(gCurrentObject, sp4C);
-            gCurrentObject->oMoveAnglePitch = 0x1000;
-            gCurrentObject->oMoveAngleYaw = 0x9000;
-            gCurrentObject->oFaceAnglePitch = gCurrentObject->oMoveAnglePitch / 2;
-            gCurrentObject->oFaceAngleYaw = gCurrentObject->oMoveAngleYaw;
-            gCurrentObject->oAction += 1;
-            break;
-
-        case 101:
-            object_pos_to_vec3f(sp4C, gCurrentObject);
-            if (gCurrentObject->oTimer > 60) {
-                gCurrentObject->oForwardVel =
-                    approach_f32_asymptotic(gCurrentObject->oForwardVel, -10.f, 0.05f);
-                gCurrentObject->oMoveAngleYaw += 0x78;
-                gCurrentObject->oMoveAnglePitch += 0x40;
-                gCurrentObject->oFaceAngleYaw = camera_approach_s16_symmetric(
-                    gCurrentObject->oFaceAngleYaw, (s16) calculate_yaw(sp4C, gCamera->pos),
-                    0x200);
-            }
-            if (gCurrentObject->oTimer > 105) {
-                gCurrentObject->oAction += 1;
-                gCurrentObject->oMoveAnglePitch = 0xE00;
-            }
-            gCurrentObject->oFaceAnglePitch = 0;
-            cur_obj_set_pos_via_transform();
-            break;
-
-        case 102:
-            object_pos_to_vec3f(sp4C, gCurrentObject);
-            gCurrentObject->oForwardVel =
-                approach_f32_asymptotic(gCurrentObject->oForwardVel, 60.f, 0.05f);
-            gCurrentObject->oFaceAngleYaw = camera_approach_s16_symmetric(
-                gCurrentObject->oFaceAngleYaw, (s16) calculate_yaw(sp4C, gCamera->pos), 0x200);
-            if (gCurrentObject->oTimer < 62)
-                gCurrentObject->oMoveAngleYaw =
-                    approach_s16_asymptotic(gCurrentObject->oMoveAngleYaw, 0x1800, 0x1E);
-            gCurrentObject->oMoveAnglePitch =
-                camera_approach_s16_symmetric(gCurrentObject->oMoveAnglePitch, -0x2000, 0x5A);
-            gCurrentObject->oFaceAnglePitch = 0;
-            cur_obj_set_pos_via_transform();
-            break;
-    }
 }
 #undef TIMER
diff --git a/src/game/camera.c b/src/game/camera.c
index 411fbc64..3bacd5b2 100644
--- a/src/game/camera.c
+++ b/src/game/camera.c
@@ -110,11 +110,11 @@ u8 sFramesPaused;
 extern struct CameraFOVStatus sFOVState;
 extern struct TransitionInfo sModeTransition;
 extern struct PlayerGeometry sMarioGeometry;
-extern s16 unusedFreeRoamWallYaw;
+// extern s16 unusedFreeRoamWallYaw;
 extern s16 sAvoidYawVel;
 extern s16 sCameraYawAfterDoorCutscene;
-extern s16 unusedSplinePitch;
-extern s16 unusedSplineYaw;
+// extern s16 unusedSplinePitch;
+// extern s16 unusedSplineYaw;
 extern struct HandheldShakePoint sHandheldShakeSpline[4];
 extern s16 sHandheldShakeMag;
 extern f32 sHandheldShakeTimer;
@@ -122,17 +122,17 @@ extern f32 sHandheldShakeInc;
 extern s16 sHandheldShakePitch;
 extern s16 sHandheldShakeYaw;
 extern s16 sHandheldShakeRoll;
-extern u32 unused8033B30C;
-extern u32 unused8033B310;
+// extern u32 unused8033B30C;
+// extern u32 unused8033B310;
 extern s16 sSelectionFlags;
-extern s16 unused8033B316;
+// extern s16 unused8033B316;
 extern s16 s2ndRotateFlags;
-extern s16 unused8033B31A;
+// extern s16 unused8033B31A;
 extern s16 sCameraSoundFlags;
 extern u16 sCButtonsPressed;
 extern s16 sCutsceneDialogID;
 extern struct LakituState gLakituState;
-extern s16 unused8033B3E8;
+// extern s16 unused8033B3E8;
 extern s16 sAreaYaw;
 extern s16 sAreaYawChange;
 extern s16 sLakituDist;
@@ -161,7 +161,7 @@ extern struct CutsceneSplinePoint sCurCreditsSplinePos[32];
 extern struct CutsceneSplinePoint sCurCreditsSplineFocus[32];
 extern s16 sCutsceneSplineSegment;
 extern f32 sCutsceneSplineSegmentProgress;
-extern s16 unused8033B6E8;
+// extern s16 unused8033B6E8;
 extern s16 sCutsceneShot;
 extern s16 gCutsceneTimer;
 extern struct CutsceneVariable sCutsceneVars[10];
@@ -178,7 +178,7 @@ struct CameraFOVStatus sFOVState;
 struct TransitionInfo sModeTransition;
 struct PlayerGeometry sMarioGeometry;
 struct Camera *gCamera;
-s16 unusedFreeRoamWallYaw;
+// s16 unusedFreeRoamWallYaw;
 s16 sAvoidYawVel;
 s16 sCameraYawAfterDoorCutscene;
 /**
@@ -191,8 +191,8 @@ struct CutsceneSplinePoint sCurCreditsSplinePos[32];
  */
 struct CutsceneSplinePoint sCurCreditsSplineFocus[32];
 
-s16 unusedSplinePitch;
-s16 unusedSplineYaw;
+// s16 unusedSplinePitch;
+// s16 unusedSplineYaw;
 
 /**
  * The progress (from 0 to 1) through the current spline segment.
@@ -204,7 +204,7 @@ f32 sCutsceneSplineSegmentProgress;
  * The current segment of the CutsceneSplinePoint[] being used.
  */
 s16 sCutsceneSplineSegment;
-s16 unused8033B6E8;
+// s16 unused8033B6E8;
 
 // Shaky Hand-held Camera effect variables
 struct HandheldShakePoint sHandheldShakeSpline[4];
@@ -225,8 +225,8 @@ u32 gCutsceneObjSpawn;
  */
 s32 gObjCutsceneDone;
 
-u32 unused8033B30C;
-u32 unused8033B310;
+// u32 unused8033B30C;
+// u32 unused8033B310;
 
 /**
  * Determines which R-Trigger mode is selected in the pause menu.
@@ -237,7 +237,7 @@ s16 sSelectionFlags;
  * Flags that determine what movements the camera should start / do this frame.
  */
 s16 gCameraMovementFlags;
-s16 unused8033B316;
+// s16 unused8033B316;
 
 /**
  * Flags that change how modes operate and how Lakitu moves.
@@ -250,7 +250,7 @@ s16 sStatusFlags;
  * determine whether to rotate all the way, or just to 60 degrees.
  */
 s16 s2ndRotateFlags;
-s16 unused8033B31A;
+// s16 unused8033B31A;
 /**
  * Flags that control buzzes and sounds that play, mostly for C-button input.
  */
@@ -271,9 +271,9 @@ s16 sCutsceneShot;
  * The current frame of the cutscene shot.
  */
 s16 gCutsceneTimer;
-s16 unused8033B3E8;
+// s16 unused8033B3E8;
 #if defined(VERSION_EU) || defined(VERSION_SH)
-s16 unused8033B3E82;
+// s16 unused8033B3E82;
 #endif
 /**
  * The angle of the direction vector from the area's center to Mario's position.
@@ -321,12 +321,6 @@ s16 sCUpCameraPitch;
  */
 s16 sModeOffsetYaw;
 
-/**
- * Stores Mario's yaw around the stairs, relative to the camera's position.
- *
- * Used in update_spiral_stairs_camera()
- */
-s16 sSpiralStairsYawOffset;
 
 /**
  * The constant offset to 8-direction mode's yaw.
@@ -389,11 +383,11 @@ struct CameraStoredInfo sCameraStoreCUp;
 struct CameraStoredInfo sCameraStoreCutscene;
 
 // first iteration of data
-u32 unused8032CFC0 = 0;
+// u32 unused8032CFC0 = 0;
 struct Object *gCutsceneFocus = NULL;
 // other camera focuses?
-u32 unused8032CFC8 = 0;
-u32 unused8032CFCC = 0;
+// u32 unused8032CFC8 = 0;
+// u32 unused8032CFCC = 0;
 struct Object *gSecondCameraFocus = NULL;
 
 /**
@@ -403,9 +397,9 @@ s16 sYawSpeed = 0x400;
 s32 gCurrLevelArea = 0;
 u32 gPrevLevel = 0;
 
-f32 unused8032CFE0 = 1000.0f;
-f32 unused8032CFE4 = 800.0f;
-u32 unused8032CFE8 = 0;
+// f32 unused8032CFE0 = 1000.0f;
+// f32 unused8032CFE4 = 800.0f;
+// u32 unused8032CFE8 = 0;
 f32 gCameraZoomDist = 800.0f;
 
 /**
@@ -435,12 +429,12 @@ u8 sFramesSinceCutsceneEnded = 0;
 u8 sCutsceneDialogResponse = 0;
 struct PlayerCameraState *sMarioCamState = &gPlayerCameraState[0];
 struct PlayerCameraState *sLuigiCamState = &gPlayerCameraState[1];
-u32 unused8032D008 = 0;
+// u32 unused8032D008 = 0;
 Vec3f sFixedModeBasePosition    = { 646.0f, 143.0f, -1513.0f };
-Vec3f sUnusedModeBasePosition_2 = { 646.0f, 143.0f, -1513.0f };
-Vec3f sUnusedModeBasePosition_3 = { 646.0f, 143.0f, -1513.0f };
-Vec3f sUnusedModeBasePosition_4 = { 646.0f, 143.0f, -1513.0f };
-Vec3f sUnusedModeBasePosition_5 = { 646.0f, 143.0f, -1513.0f };
+// Vec3f sUnusedModeBasePosition_2 = { 646.0f, 143.0f, -1513.0f };
+// Vec3f sUnusedModeBasePosition_3 = { 646.0f, 143.0f, -1513.0f };
+// Vec3f sUnusedModeBasePosition_4 = { 646.0f, 143.0f, -1513.0f };
+// Vec3f sUnusedModeBasePosition_5 = { 646.0f, 143.0f, -1513.0f };
 
 f32 gCustomFOV = 45.0f;
 
@@ -458,7 +452,6 @@ s32 update_parallel_tracking_camera(struct Camera *c, Vec3f, Vec3f);
 s32 update_fixed_camera(struct Camera *c, Vec3f, Vec3f);
 s32 update_8_directions_camera(struct Camera *c, Vec3f, Vec3f);
 s32 update_slide_or_0f_camera(struct Camera *c, Vec3f, Vec3f);
-s32 update_spiral_stairs_camera(struct Camera *c, Vec3f, Vec3f);
 
 typedef s32 (*CameraTransition)(struct Camera *c, Vec3f, Vec3f);
 CameraTransition sModeTransitions[] = {
@@ -478,8 +471,7 @@ CameraTransition sModeTransitions[] = {
     update_fixed_camera,
     update_8_directions_camera,
     update_slide_or_0f_camera,
-    update_mario_camera,
-    update_spiral_stairs_camera
+    update_mario_camera
 };
 
 // Move these two tables to another include file?
@@ -2050,341 +2042,12 @@ s32 update_mario_camera(UNUSED struct Camera *c, Vec3f focus, Vec3f pos) {
     return sMarioCamState->faceAngle[1];
 }
 
-/**
- * Update the camera in default, close, and free roam mode
- *
- * The camera moves behind Mario, and can rotate all the way around
- */
-s16 update_default_camera(struct Camera *c) {
-    Vec3f tempPos;
-    Vec3f cPos;
-    UNUSED u8 unused1[12];
-    struct Surface *marioFloor;
-    struct Surface *cFloor;
-    struct Surface *tempFloor;
-    struct Surface *ceil;
-    f32 camFloorHeight;
-    f32 tempFloorHeight;
-    f32 marioFloorHeight;
-    UNUSED u8 unused2[4];
-    f32 dist;
-    f32 zoomDist;
-    f32 waterHeight;
-    f32 gasHeight;
-    s16 avoidYaw;
-    s16 pitch;
-    s16 yaw;
-    s16 yawGoal = sMarioCamState->faceAngle[1] + DEGREES(180);
-    f32 posHeight;
-    f32 focHeight;
-    f32 distFromWater;
-    s16 tempPitch;
-    s16 tempYaw;
-    f32 xzDist;
-    UNUSED u8 unused4[4];
-    s16 nextYawVel;
-    s16 yawVel = 0;
-    f32 scale;
-    s32 avoidStatus = 0;
-    s32 closeToMario = 0;
-    f32 ceilHeight = find_ceil(gLakituState.goalPos[0],
-                               gLakituState.goalPos[1],
-                               gLakituState.goalPos[2], &ceil);
-    s16 yawDir;
-
-    handle_c_button_movement(c);
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-
-    // If C-Down is active, determine what distance the camera should be from Mario
-    if (gCameraMovementFlags & CAM_MOVE_ZOOMED_OUT) {
-        //! In Mario mode, the camera is zoomed out further than in Lakitu mode (1400 vs 1200)
-        if (set_cam_angle(0) == CAM_ANGLE_MARIO) {
-            zoomDist = gCameraZoomDist + 1050;
-        } else {
-            zoomDist = gCameraZoomDist + 400;
-        }
-    } else {
-        zoomDist = gCameraZoomDist;
-    }
-
-    if (sMarioCamState->action & ACT_FLAG_HANGING ||
-        sMarioCamState->action == ACT_RIDING_HOOT) {
-        zoomDist *= 0.8f;
-        set_handheld_shake(HAND_CAM_SHAKE_HANG_OWL);
-    }
-
-    // If not zooming out, only allow dist to decrease
-    if (sZoomAmount == 0.f) {
-        if (dist > zoomDist) {
-            if ((dist -= 50.f) < zoomDist) {
-                dist = zoomDist;
-            }
-        }
-    } else {
-        if ((sZoomAmount -= 30.f) < 0.f) {
-            sZoomAmount = 0.f;
-        }
-        if (dist > zoomDist) {
-            if ((dist -= 30.f) < zoomDist) {
-                dist = zoomDist;
-            }
-        }
-        if (dist < zoomDist) {
-            if ((dist += 30.f) > zoomDist) {
-                dist = zoomDist;
-            }
-        }
-    }
-
-    // Determine how fast to rotate the camera
-    if (sCSideButtonYaw == 0) {
-        if (c->mode == CAMERA_MODE_FREE_ROAM) {
-            nextYawVel = 0xC0;
-        } else {
-            nextYawVel = 0x100;
-        }
-        if ((gPlayer1Controller->stickX != 0.f || gPlayer1Controller->stickY != 0.f) != 0) {
-            nextYawVel = 0x20;
-        }
-    } else {
-        if (sCSideButtonYaw < 0) {
-            yaw += 0x200;
-        }
-        if (sCSideButtonYaw > 0) {
-            yaw -= 0x200;
-        }
-        camera_approach_s16_symmetric_bool(&sCSideButtonYaw, 0, 0x100);
-        nextYawVel = 0;
-    }
-    sYawSpeed = 0x400;
-    xzDist = calc_hor_dist(sMarioCamState->pos, c->pos);
-
-    if (sStatusFlags & CAM_FLAG_BEHIND_MARIO_POST_DOOR) {
-        if (xzDist >= 250) {
-            sStatusFlags &= ~CAM_FLAG_BEHIND_MARIO_POST_DOOR;
-        }
-        if (ABS((sMarioCamState->faceAngle[1] - yaw) / 2) < 0x1800) {
-            sStatusFlags &= ~CAM_FLAG_BEHIND_MARIO_POST_DOOR;
-            yaw = sCameraYawAfterDoorCutscene + DEGREES(180);
-            dist = 800.f;
-            sStatusFlags |= CAM_FLAG_BLOCK_SMOOTH_MOVEMENT;
-        }
-    } else if (xzDist < 250) {
-        // Turn rapidly if very close to Mario
-        c->pos[0] += (250 - xzDist) * sins(yaw);
-        c->pos[2] += (250 - xzDist) * coss(yaw);
-        if (sCSideButtonYaw == 0) {
-            nextYawVel = 0x1000;
-            sYawSpeed = 0;
-            vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-        }
-        closeToMario |= 1;
-    }
-
-    if (-16 < gPlayer1Controller->stickY) {
-        c->yaw = yaw;
-    }
-
-    calc_y_to_curr_floor(&posHeight, 1, 200, &focHeight, 0.9f, 200);
-    vec3f_copy(cPos, c->pos);
-    avoidStatus = rotate_camera_around_walls(c, cPos, &avoidYaw, 0x600);
-    // If a wall is blocking the view of Mario, then rotate in the calculated direction
-    if (avoidStatus == 3) {
-        unusedFreeRoamWallYaw = avoidYaw;
-        sAvoidYawVel = yaw;
-        sStatusFlags |= CAM_FLAG_COLLIDED_WITH_WALL;
-        //! Does nothing
-        vec3f_get_dist_and_angle(sMarioCamState->pos, cPos, &xzDist, &tempPitch, &tempYaw);
-        // Rotate to avoid the wall
-        approach_s16_asymptotic_bool(&yaw, avoidYaw, 10);
-        //! Does nothing
-        vec3f_set_dist_and_angle(sMarioCamState->pos, cPos, xzDist, tempPitch, tempYaw);
-        sAvoidYawVel = (sAvoidYawVel - yaw) / 0x100;
-    } else {
-        if (gMarioStates[0].forwardVel == 0.f) {
-            if (sStatusFlags & CAM_FLAG_COLLIDED_WITH_WALL) {
-                if ((yawGoal - yaw) / 0x100 >= 0) {
-                    yawDir = -1;
-                } else {
-                    yawDir = 1;
-                }
-                if ((sAvoidYawVel > 0 && yawDir > 0) || (sAvoidYawVel < 0 && yawDir < 0)) {
-                    yawVel = nextYawVel;
-                }
-            } else {
-                yawVel = nextYawVel;
-            }
-        } else {
-            if (nextYawVel == 0x1000) {
-                yawVel = nextYawVel;
-            }
-            sStatusFlags &= ~CAM_FLAG_COLLIDED_WITH_WALL;
-        }
-
-        // If a wall is near the camera, turn twice as fast
-        if (avoidStatus != 0) {
-            yawVel += yawVel;
-        }
-        // ...Unless the camera already rotated from being close to Mario
-        if ((closeToMario & 1) && avoidStatus != 0) {
-            yawVel = 0;
-        }
-        if (yawVel != 0 && get_dialog_id() == -1) {
-            camera_approach_s16_symmetric_bool(&yaw, yawGoal, yawVel);
-        }
-    }
-
-    // Only zoom out if not obstructed by walls and Lakitu hasn't collided with any
-    if (avoidStatus == 0 && !(sStatusFlags & CAM_FLAG_COLLIDED_WITH_WALL)) {
-        approach_f32_asymptotic_bool(&dist, zoomDist - 100.f, 0.05f);
-    }
-    vec3f_set_dist_and_angle(sMarioCamState->pos, cPos, dist, pitch, yaw);
-    cPos[1] += posHeight + 125.f;
-
-    // Move the camera away from walls and set the collision flag
-    if (collide_with_walls(cPos, 10.f, 80.f) != 0) {
-        sStatusFlags |= CAM_FLAG_COLLIDED_WITH_WALL;
-    }
-
-    c->focus[0] = sMarioCamState->pos[0];
-    c->focus[1] = sMarioCamState->pos[1] + 125.f + focHeight;
-    c->focus[2] = sMarioCamState->pos[2];
-
-    marioFloorHeight = 125.f + sMarioGeometry.currFloorHeight;
-    marioFloor = sMarioGeometry.currFloor;
-    camFloorHeight = find_floor(cPos[0], cPos[1] + 50.f, cPos[2], &cFloor) + 125.f;
-    for (scale = 0.1f; scale < 1.f; scale += 0.2f) {
-        scale_along_line(tempPos, cPos, sMarioCamState->pos, scale);
-        tempFloorHeight = find_floor(tempPos[0], tempPos[1], tempPos[2], &tempFloor) + 125.f;
-        if (tempFloor != NULL && tempFloorHeight > marioFloorHeight) {
-            marioFloorHeight = tempFloorHeight;
-            marioFloor = tempFloor;
-        }
-    }
-
-    // Lower the camera in Mario mode
-    if (sSelectionFlags & CAM_MODE_MARIO_ACTIVE) {
-        marioFloorHeight -= 35.f;
-        camFloorHeight -= 35.f;
-        c->focus[1] -= 25.f;
-    }
-
-    // If there's water below the camera, decide whether to keep the camera above the water surface
-    waterHeight = find_water_level(cPos[0], cPos[2]);
-    if (waterHeight != FLOOR_LOWER_LIMIT) {
-        waterHeight += 125.f;
-        distFromWater = waterHeight - marioFloorHeight;
-        if (!(gCameraMovementFlags & CAM_MOVE_METAL_BELOW_WATER)) {
-            if (distFromWater > 800.f && (sMarioCamState->action & ACT_FLAG_METAL_WATER)) {
-                gCameraMovementFlags |= CAM_MOVE_METAL_BELOW_WATER;
-            }
-        } else {
-            if (distFromWater < 400.f || !(sMarioCamState->action & ACT_FLAG_METAL_WATER)) {
-                gCameraMovementFlags &= ~CAM_MOVE_METAL_BELOW_WATER;
-            }
-        }
-        // If not wearing the metal cap, always stay above
-        if (!(gCameraMovementFlags & CAM_MOVE_METAL_BELOW_WATER) && camFloorHeight < waterHeight) {
-            camFloorHeight = waterHeight;
-        }
-    } else {
-        gCameraMovementFlags &= ~CAM_MOVE_METAL_BELOW_WATER;
-    }
-
-    cPos[1] = camFloorHeight;
-    vec3f_copy(tempPos, cPos);
-    tempPos[1] -= 125.f;
-    if (marioFloor != NULL && camFloorHeight <= marioFloorHeight) {
-        avoidStatus = is_range_behind_surface(c->focus, tempPos, marioFloor, 0, -1);
-        if (avoidStatus != 1 && ceilHeight > marioFloorHeight) {
-            camFloorHeight = marioFloorHeight;
-        }
-    }
-
-    posHeight = 0.f;
-    if (c->mode == CAMERA_MODE_FREE_ROAM) {
-        if (gCameraMovementFlags & CAM_MOVE_ZOOMED_OUT) {
-            posHeight = 375.f;
-            if (gCurrLevelArea == AREA_SSL_PYRAMID) {
-                posHeight /= 2;
-            }
-        } else {
-            posHeight = 100.f;
-        }
-    }
-    if ((gCameraMovementFlags & CAM_MOVE_ZOOMED_OUT) && (sSelectionFlags & CAM_MODE_MARIO_ACTIVE)) {
-        posHeight = 610.f;
-        if (gCurrLevelArea == AREA_SSL_PYRAMID || gCurrLevelNum == LEVEL_CASTLE) {
-            posHeight /= 2;
-        }
-    }
-
-    // Make Lakitu fly above the gas
-    gasHeight = find_poison_gas_level(cPos[0], cPos[2]);
-    if (gasHeight != FLOOR_LOWER_LIMIT) {
-        if ((gasHeight += 130.f) > c->pos[1]) {
-            c->pos[1] = gasHeight;
-        }
-    }
-
-    if (sMarioCamState->action & ACT_FLAG_HANGING || sMarioCamState->action == ACT_RIDING_HOOT) {
-        camFloorHeight = sMarioCamState->pos[1] + 400.f;
-        if (c->mode == CAMERA_MODE_FREE_ROAM) {
-            camFloorHeight -= 100.f;
-        }
-        ceilHeight = CELL_HEIGHT_LIMIT;
-        vec3f_copy(c->focus, sMarioCamState->pos);
-    }
-
-    if (sMarioCamState->action & ACT_FLAG_ON_POLE) {
-        camFloorHeight = gMarioStates[0].usedObj->oPosY + 125.f;
-        if (sMarioCamState->pos[1] - 100.f > camFloorHeight) {
-            camFloorHeight = sMarioCamState->pos[1] - 100.f;
-        }
-        ceilHeight = CELL_HEIGHT_LIMIT;
-        vec3f_copy(c->focus, sMarioCamState->pos);
-    }
-    if (camFloorHeight != FLOOR_LOWER_LIMIT) {
-        camFloorHeight += posHeight;
-        approach_camera_height(c, camFloorHeight, 20.f);
-    }
-    c->pos[0] = cPos[0];
-    c->pos[2] = cPos[2];
-    cPos[0] = gLakituState.goalPos[0];
-    cPos[1] = c->pos[1];
-    cPos[2] = gLakituState.goalPos[2];
-    vec3f_get_dist_and_angle(cPos, c->pos, &dist, &tempPitch, &tempYaw);
-    // Prevent the camera from lagging behind too much
-    if (dist > 50.f) {
-        dist = 50.f;
-        vec3f_set_dist_and_angle(cPos, c->pos, dist, tempPitch, tempYaw);
-    }
-    if (sMarioGeometry.currFloorType != SURFACE_DEATH_PLANE) {
-        vec3f_get_dist_and_angle(c->focus, c->pos, &dist, &tempPitch, &tempYaw);
-        if (dist > zoomDist) {
-            dist = zoomDist;
-            vec3f_set_dist_and_angle(c->focus, c->pos, dist, tempPitch, tempYaw);
-        }
-    }
-    if (ceilHeight != CELL_HEIGHT_LIMIT) {
-        if (c->pos[1] > (ceilHeight -= 150.f)
-            && (avoidStatus = is_range_behind_surface(c->pos, sMarioCamState->pos, ceil, 0, -1)) == 1) {
-            c->pos[1] = ceilHeight;
-        }
-    }
-    if (gCurrLevelArea == AREA_WDW_TOWN) {
-        yaw = clamp_positions_and_find_yaw(c->pos, c->focus, 2254.f, -3789.f, 3790.f, -2253.f);
-    }
-    return yaw;
-}
-
 /**
  * The default camera mode
  * Used by close and free roam modes
  */
 void mode_default_camera(struct Camera *c) {
     set_fov_function(CAM_FOV_DEFAULT);
-    c->nextYaw = update_default_camera(c);
     pan_ahead_of_player(c);
 }
 
@@ -2404,86 +2067,10 @@ void mode_mario_camera(struct Camera *c) {
     mode_default_camera(c);
 }
 
-/**
- * Rotates the camera around the spiral staircase.
- */
-s32 update_spiral_stairs_camera(struct Camera *c, Vec3f focus, Vec3f pos) {
-    UNUSED s16 unused1;
-    /// The returned yaw
-    s16 camYaw;
-    // unused
-    s16 focPitch;
-    /// The focus (Mario)'s yaw around the stairs
-    s16 focYaw;
-    // unused
-    s16 posPitch;
-    /// The camera's yaw around the stairs
-    s16 posYaw;
-    UNUSED s32 unused2;
-    Vec3f cPos;
-    Vec3f checkPos;
-    struct Surface *floor;
-    // unused
-    f32 dist;
-    f32 focusHeight;
-    f32 floorHeight;
-    f32 focY;
-
-    handle_c_button_movement(c);
-    // Set base pos to the center of the staircase
-    vec3f_set(sFixedModeBasePosition, -1280.f, 614.f, 1740.f);
-
-    // Focus on Mario, and move the focus up the staircase with him
-    calc_y_to_curr_floor(&focusHeight, 1.f, 200.f, &focusHeight, 0.9f, 200.f);
-    focus[0] = sMarioCamState->pos[0];
-    focY = sMarioCamState->pos[1] + 125.f + focusHeight;
-    focus[2] = sMarioCamState->pos[2];
-
-    vec3f_copy(cPos, pos);
-    vec3f_get_dist_and_angle(sFixedModeBasePosition, focus, &dist, &focPitch, &focYaw);
-    vec3f_get_dist_and_angle(sFixedModeBasePosition, cPos, &dist, &posPitch, &posYaw);
-
-    sSpiralStairsYawOffset = posYaw - focYaw;
-    // posYaw will change if Mario is more than 90 degrees around the stairs, relative to the camera
-    if (sSpiralStairsYawOffset < DEGREES(-90)) {
-        sSpiralStairsYawOffset = DEGREES(-90);
-    }
-    if (sSpiralStairsYawOffset > DEGREES(90)) {
-        sSpiralStairsYawOffset = DEGREES(90);
-    }
-    focYaw += sSpiralStairsYawOffset;
-    posYaw = focYaw;
-    //! @bug unnecessary
-    camera_approach_s16_symmetric_bool(&posYaw, focYaw, 0x1000);
-
-    vec3f_set_dist_and_angle(sFixedModeBasePosition, cPos, 300.f, 0, posYaw);
-
-    // Move the camera's y coord up/down the staircase
-    checkPos[0] = focus[0] + (cPos[0] - focus[0]) * 0.7f;
-    checkPos[1] = focus[1] + (cPos[1] - focus[1]) * 0.7f + 300.f;
-    checkPos[2] = focus[2] + (cPos[2] - focus[2]) * 0.7f;
-    floorHeight = find_floor(checkPos[0], checkPos[1] + 50.f, checkPos[2], &floor);
-
-    if (floorHeight != FLOOR_LOWER_LIMIT) {
-        if (floorHeight < sMarioGeometry.currFloorHeight) {
-            floorHeight = sMarioGeometry.currFloorHeight;
-        }
-        pos[1] = approach_f32(pos[1], (floorHeight += 125.f), 30.f, 30.f);
-    }
-
-    camera_approach_f32_symmetric_bool(&focus[1], focY, 30.f);
-    pos[0] = cPos[0];
-    pos[2] = cPos[2];
-    camYaw = calculate_yaw(focus, pos);
-
-    return camYaw;
-}
-
 /**
  * The mode used in the spiral staircase in the castle
  */
 void mode_spiral_stairs_camera(struct Camera *c) {
-    c->nextYaw = update_spiral_stairs_camera(c, c->focus, c->pos);
 }
 
 s32 update_slide_or_0f_camera(UNUSED struct Camera *c, Vec3f focus, Vec3f pos) {
@@ -3062,7 +2649,7 @@ void update_camera(struct Camera *c) {
 
         if (c->cutscene != 0) {
             sYawSpeed = 0;
-            play_cutscene(c);
+            // play_cutscene(c);
             sFramesSinceCutsceneEnded = 0;
         } else {
             // Clear the recent cutscene after 8 frames
@@ -3160,7 +2747,7 @@ void update_camera(struct Camera *c) {
         }
     }
     // Start any Mario-related cutscenes
-    start_cutscene(c, get_cutscene_from_mario_status(c));
+    // start_cutscene(c, get_cutscene_from_mario_status(c));
     stub_camera_2(c);
     gCheckingSurfaceCollisionsForCamera = FALSE;
     if (!gPuppyCam.enabled || c->cutscene != 0 || gCurrentArea->camera->mode == CAMERA_MODE_INSIDE_CANNON)
@@ -3250,23 +2837,23 @@ void reset_camera(struct Camera *c) {
     gCutsceneObjSpawn = 0;
     gObjCutsceneDone = FALSE;
     gCutsceneFocus = NULL;
-    unused8032CFC8 = 0;
-    unused8032CFCC = 0;
+    // unused8032CFC8 = 0;
+    // unused8032CFCC = 0;
     gSecondCameraFocus = NULL;
     sCButtonsPressed = 0;
     vec3f_copy(sModeTransition.marioPos, sMarioCamState->pos);
     sModeTransition.framesLeft = 0;
-    unused8032CFCC = -1;
-    unused8032CFC8 = -1;
+    // unused8032CFCC = -1;
+    // unused8032CFC8 = -1;
     gCameraMovementFlags = 0;
     gCameraMovementFlags |= CAM_MOVE_INIT_CAMERA;
-    unused8033B316 = 0;
+    // unused8033B316 = 0;
     sStatusFlags = 0;
-    unused8033B31A = 0;
+    // unused8033B31A = 0;
     sCameraSoundFlags = 0;
     sCUpCameraPitch = 0;
     sModeOffsetYaw = 0;
-    sSpiralStairsYawOffset = 0;
+    // sSpiralStairsYawOffset = 0;
     sLakituDist = 0;
     sLakituPitch = 0;
     sAreaYaw = 0;
@@ -3304,8 +2891,8 @@ void reset_camera(struct Camera *c) {
     sFOVState.shakePhase = 0;
     sObjectCutscene = 0;
     gRecentCutscene = 0;
-    unused8033B30C = 0;
-    unused8033B310 = 0;
+    // unused8033B30C = 0;
+    // unused8033B310 = 0;
 }
 
 void init_camera(struct Camera *c) {
@@ -3344,7 +2931,7 @@ void init_camera(struct Camera *c) {
     }
     sCutsceneSplineSegment = 0;
     sCutsceneSplineSegmentProgress = 0.f;
-    unused8033B6E8 = 0;
+    // unused8033B6E8 = 0;
     sHandheldShakeInc = 0.f;
     sHandheldShakeTimer = 0.f;
     sHandheldShakeMag = 0;
@@ -3364,19 +2951,19 @@ void init_camera(struct Camera *c) {
         case LEVEL_BOWSER_1:
 #ifndef VERSION_JP
             if (gCurrDemoInput == NULL) {
-                start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
+                // start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
             } else if (gSecondCameraFocus != NULL) {
                 gSecondCameraFocus->oBowserUnk88 = 2;
             }
 #else
-            start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
+            // start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
 #endif
             break;
         case LEVEL_BOWSER_2:
-            start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
+            // start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
             break;
         case LEVEL_BOWSER_3:
-            start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
+            // start_cutscene(c, CUTSCENE_ENTER_BOWSER_ARENA);
             break;
 
         //! Hardcoded position checks determine which cutscene to play when Mario enters castle grounds.
@@ -3386,10 +2973,10 @@ void init_camera(struct Camera *c) {
                 marioOffset[2] = -800.f;
             }
             if (is_within_100_units_of_mario(-6901.f, 2376.f, -6509.f) == 1) {
-                start_cutscene(c, CUTSCENE_EXIT_WATERFALL);
+                // start_cutscene(c, CUTSCENE_EXIT_WATERFALL);
             }
             if (is_within_100_units_of_mario(5408.f, 4500.f, 3637.f) == 1) {
-                start_cutscene(c, CUTSCENE_EXIT_FALL_WMOTR);
+                // start_cutscene(c, CUTSCENE_EXIT_FALL_WMOTR);
             }
             gLakituState.mode = CAMERA_MODE_FREE_ROAM;
             break;
@@ -3630,8 +3217,8 @@ void evaluate_cubic_spline(f32 u, Vec3f Q, Vec3f a0, Vec3f a1, Vec3f a2, Vec3f a
     y = B[0] * a0[1] + B[1] * a1[1] + B[2] * a2[1] + B[3] * a3[1];
     z = B[0] * a0[2] + B[1] * a1[2] + B[2] * a2[2] + B[3] * a3[2];
 
-    unusedSplinePitch = atan2s(sqrtf(x * x + z * z), y);
-    unusedSplineYaw = atan2s(z, x);
+    // unusedSplinePitch = atan2s(sqrtf(x * x + z * z), y);
+    // unusedSplineYaw = atan2s(z, x);
 }
 
 /**
@@ -4824,20 +4411,6 @@ s32 offset_yaw_outward_radial(struct Camera *c, s16 areaYaw) {
     return yaw;
 }
 
-/**
- * Plays the background music that starts while peach reads the intro message.
- */
-void cutscene_intro_peach_play_message_music(void) {
-    play_music(SEQ_PLAYER_LEVEL, SEQUENCE_ARGS(4, SEQ_EVENT_PEACH_MESSAGE), 0);
-}
-
-/**
- * Plays the music that starts after peach fades and Lakitu appears.
- */
-void cutscene_intro_peach_play_lakitu_flying_music(void) {
-    play_music(SEQ_PLAYER_LEVEL, SEQUENCE_ARGS(15, SEQ_EVENT_CUTSCENE_INTRO), 0);
-}
-
 void play_camera_buzz_if_cdown(void) {
     if (gPlayer1Controller->buttonPressed & D_CBUTTONS) {
         play_sound_button_change_blocked();
@@ -5089,12 +4662,12 @@ void clear_cutscene_vars(UNUSED struct Camera *c) {
 /**
  * Start the cutscene, `cutscene`, if it is not already playing.
  */
-void start_cutscene(struct Camera *c, u8 cutscene) {
-    if (c->cutscene != cutscene) {
-        c->cutscene = cutscene;
-        clear_cutscene_vars(c);
-    }
-}
+// void start_cutscene(struct Camera *c, u8 cutscene) {
+//     if (c->cutscene != cutscene) {
+//         c->cutscene = cutscene;
+//         clear_cutscene_vars(c);
+//     }
+// }
 
 /**
  * Look up the victory dance cutscene in sDanceCutsceneTable
@@ -5358,22 +4931,6 @@ void set_focus_rel_mario(struct Camera *c, f32 leftRight, f32 yOff, f32 forwBack
     c->focus[1] = sMarioCamState->pos[1] + yOff + focFloorYOff;
 }
 
-/**
- * Set the camera's position to Mario's position, and add several relative offsets. Unused.
- *
- * @param leftRight offset to Mario's left/right, relative to his faceAngle
- * @param yOff y offset
- * @param forwBack offset to Mario's front/back, relative to his faceAngle
- * @param yawOff offset to Mario's faceAngle, changes the direction of `leftRight` and `forwBack`
- */
-static void unused_set_pos_rel_mario(struct Camera *c, f32 leftRight, f32 yOff, f32 forwBack, s16 yawOff) {
-    u16 yaw = sMarioCamState->faceAngle[1] + yawOff;
-
-    c->pos[0] = sMarioCamState->pos[0] + forwBack * sins(yaw) + leftRight * coss(yaw);
-    c->pos[1] = sMarioCamState->pos[1] + yOff;
-    c->pos[2] = sMarioCamState->pos[2] + forwBack * coss(yaw) - leftRight * sins(yaw);
-}
-
 /**
  * Rotates the offset `to` according to the pitch and yaw values in `rotation`.
  * Adds `from` to the rotated offset, and stores the result in `dst`.
@@ -5849,7 +5406,7 @@ BAD_RETURN(s32) cam_bob_default_free_roam(struct Camera *c) {
 BAD_RETURN(s32) cam_castle_hmc_start_pool_cutscene(struct Camera *c) {
     if ((sMarioCamState->action != ACT_SPECIAL_DEATH_EXIT)
         && (sMarioCamState->action != ACT_SPECIAL_EXIT_AIRBORNE)) {
-        start_cutscene(c, CUTSCENE_ENTER_POOL);
+        // start_cutscene(c, CUTSCENE_ENTER_POOL);
     }
 }
 
@@ -7037,69 +6594,6 @@ void copy_spline_segment(struct CutsceneSplinePoint dst[], struct CutsceneSpline
     do { init_spline_point(&dst[i + 3], -1, 0, src[j].point); } while (0);
 }
 
-/**
- * Triggers Mario to enter a dialog state. This is used to make Mario look at the focus of a cutscene,
- * for example, bowser.
- * @param state 0 = stop, 1 = start, 2 = start and look up, and 3 = start and look down
- *
- * @return if Mario left the dialog state, return CUTSCENE_LOOP, else return gCutsceneTimer
- */
-s16 cutscene_common_set_dialog_state(s32 state) {
-    s16 timer = gCutsceneTimer;
-    // If the dialog ended, return CUTSCENE_LOOP, which would end the cutscene shot
-    if (set_mario_npc_dialog(state) == 2) {
-        timer = CUTSCENE_LOOP;
-    }
-    return timer;
-}
-
-/// Unused SSL cutscene?
-static UNUSED void unused_cutscene_mario_dialog_looking_down(UNUSED struct Camera *c) {
-    gCutsceneTimer = cutscene_common_set_dialog_state(3);
-}
-
-/**
- * Cause Mario to enter the normal dialog state.
- */
-static BAD_RETURN(s32) cutscene_mario_dialog(UNUSED struct Camera *c) {
-    gCutsceneTimer = cutscene_common_set_dialog_state(1);
-}
-
-/// Unused SSL cutscene?
-static UNUSED void unused_cutscene_mario_dialog_looking_up(UNUSED struct Camera *c) {
-    gCutsceneTimer = cutscene_common_set_dialog_state(2);
-}
-
-/**
- * Lower the volume (US only) and start the peach letter background music
- */
-BAD_RETURN(s32) cutscene_intro_peach_start_letter_music(UNUSED struct Camera *c) {
-#if defined(VERSION_US) || defined(VERSION_SH)
-    seq_player_lower_volume(SEQ_PLAYER_LEVEL, 60, 40);
-#endif
-    cutscene_intro_peach_play_message_music();
-}
-
-/**
- * Raise the volume (not in JP) and start the flying music.
- */
-BAD_RETURN(s32) cutscene_intro_peach_start_flying_music(UNUSED struct Camera *c) {
-#ifndef VERSION_JP
-    seq_player_unlower_volume(SEQ_PLAYER_LEVEL, 60);
-#endif
-    cutscene_intro_peach_play_lakitu_flying_music();
-}
-
-#ifdef VERSION_EU
-/**
- * Lower the volume for the letter background music. In US, this happens on the same frame as the music
- * starts.
- */
-BAD_RETURN(s32) cutscene_intro_peach_eu_lower_volume(UNUSED struct Camera *c) {
-    seq_player_lower_volume(SEQ_PLAYER_LEVEL, 60, 40);
-}
-#endif
-
 void reset_pan_distance(UNUSED struct Camera *c) {
     sPanDistance = 0;
 }
@@ -7217,11 +6711,6 @@ void pan_camera(struct Camera *c, s16 incPitch, s16 incYaw) {
     vec3f_set_dist_and_angle(c->pos, c->focus, distCamToFocus, pitch, yaw);
 }
 
-BAD_RETURN(s32) cutscene_shake_explosion(UNUSED struct Camera *c) {
-    set_environmental_camera_shake(SHAKE_ENV_EXPLOSION);
-    cutscene_set_fov_shake_preset(1);
-}
-
 static UNUSED void unused_start_bowser_bounce_shake(UNUSED struct Camera *c) {
     set_environmental_camera_shake(SHAKE_ENV_BOWSER_THROW_BOUNCE);
 }
@@ -7248,3614 +6737,53 @@ void set_flag_post_door(struct Camera *c) {
     sCameraYawAfterDoorCutscene = calculate_yaw(c->focus, c->pos);
 }
 
-void cutscene_soften_music(UNUSED struct Camera *c) {
-    seq_player_lower_volume(SEQ_PLAYER_LEVEL, 60, 40);
-}
-
-void cutscene_unsoften_music(UNUSED struct Camera *c) {
-    seq_player_unlower_volume(SEQ_PLAYER_LEVEL, 60);
-}
-
-static void stub_camera_5(UNUSED struct Camera *c) {
-}
-
-BAD_RETURN(s32) cutscene_unused_start(UNUSED struct Camera *c) {
-}
-
-BAD_RETURN(s32) cutscene_unused_loop(UNUSED struct Camera *c) {
-}
-
-/**
- * Set the camera position and focus for when Mario falls from the sky.
- */
-BAD_RETURN(s32) cutscene_ending_mario_fall_start(struct Camera *c) {
-    vec3f_set(c->focus, -26.f, 0.f, -137.f);
-    vec3f_set(c->pos, 165.f, 4725.f, 324.f);
-}
-
-/**
- * Focus on Mario when he's falling from the sky.
+/* TODO:
+ * The next two arrays are both related to levels, and they look generated.
+ * These should be split into their own file.
  */
-BAD_RETURN(s32) cutscene_ending_mario_fall_focus_mario(struct Camera *c) {
-    Vec3f offset;
-    vec3f_set(offset, 0.f, 80.f, 0.f);
-
-    offset[2] = ABS(sMarioCamState->pos[1] - c->pos[1]) * -0.1f;
-    if (offset[2] > -100.f) {
-        offset[2] = -100.f;
-    }
-
-    offset_rotated(c->focus, sMarioCamState->pos, offset, sMarioCamState->faceAngle);
-}
 
 /**
- * Mario falls from the sky after the grand star cutscene.
+ * Converts the u32 given in DEFINE_COURSE to a u8 with the odd and even digits rotated into the right
+ * order for sDanceCutsceneIndexTable
  */
-BAD_RETURN(s32) cutscene_ending_mario_fall(struct Camera *c) {
-    cutscene_event(cutscene_ending_mario_fall_start, c, 0, 0);
-    cutscene_event(cutscene_ending_mario_fall_focus_mario, c, 0, -1);
-    player2_rotate_cam(c, -0x2000, 0x2000, -0x2000, 0x2000);
-}
+#define DROT(value, index) ((value >> (32 - (index + 1) * 8)) & 0xF0) >> 4 | \
+                           ((value >> (32 - (index + 1) * 8)) & 0x0F) << 4
 
-/**
- * Closeup of Mario as the wing cap fades and Mario looks up.
- */
-BAD_RETURN(s32) cutscene_ending_mario_land_closeup(struct Camera *c) {
-    vec3f_set(c->focus, 85.f, 826.f, 250.f);
-    vec3f_set(c->pos, -51.f, 988.f, -202.f);
-    player2_rotate_cam(c, -0x2000, 0x2000, -0x2000, 0x2000);
-}
+#define DANCE_ENTRY(c) { DROT(c, 0), DROT(c, 1), DROT(c, 2), DROT(c, 3) },
 
-/**
- * Reset the spline progress and cvar9.
- */
-BAD_RETURN(s32) cutscene_ending_reset_spline(UNUSED struct Camera *c) {
-    sCutsceneVars[9].point[0] = 0.f;
-    cutscene_reset_spline();
-}
+#define DEFINE_COURSE(_0, cutscenes) DANCE_ENTRY(cutscenes)
+#define DEFINE_COURSES_END()
+#define DEFINE_BONUS_COURSE(_0, cutscenes) DANCE_ENTRY(cutscenes)
 
 /**
- * Follow sEndingFlyToWindowPos/Focus up to the window.
+ * Each hex digit is an index into sDanceCutsceneTable.
+ *
+ * 0: Lakitu flies away after the dance
+ * 1: Only rotates the camera, doesn't zoom out
+ * 2: The camera goes to a close up of Mario
+ * 3: Bowser keys and the grand star
+ * 4: Default, used for 100 coin stars, 8 red coin stars in bowser levels, and secret stars
  */
-BAD_RETURN(s32) cutscene_ending_fly_up_to_window(struct Camera *c) {
-    move_point_along_spline(c->pos, sEndingFlyToWindowPos, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    move_point_along_spline(c->focus, sEndingFlyToWindowFocus, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-}
+u8 sDanceCutsceneIndexTable[][4] = {
+    #include "levels/course_defines.h"
+    { 0x44, 0x44, 0x44, 0x04 }, // (26) Why go to all this trouble to save bytes and do this?!
+};
+#undef DEFINE_COURSE
+#undef DEFINE_COURSES_END
+#undef DEFINE_BONUS_COURSE
 
-/**
- * Move the camera up to the window as the star power frees peach.
- */
-BAD_RETURN(s32) cutscene_ending_stars_free_peach(struct Camera *c) {
-    cutscene_event(cutscene_ending_reset_spline, c, 0, 0);
-    cutscene_event(cutscene_ending_fly_up_to_window, c, 0, -1);
-    player2_rotate_cam(c, -0x2000, 0x2000, -0x2000, 0x2000);
-}
+#undef DANCE_ENTRY
+#undef DROT
 
 /**
- * Move the camera to the ground as Mario lands.
- */
-BAD_RETURN(s32) cutscene_ending_mario_land(struct Camera *c) {
-    vec3f_set(c->focus, sEndingFlyToWindowFocus[0].point[0], sEndingFlyToWindowFocus[0].point[1] + 80.f, sEndingFlyToWindowFocus[0].point[2]);
-    vec3f_set(c->pos, sEndingFlyToWindowPos[0].point[0], sEndingFlyToWindowPos[0].point[1], sEndingFlyToWindowPos[0].point[2] + 150.f);
-    player2_rotate_cam(c, -0x800, 0x2000, -0x2000, 0x2000);
-}
-
-/**
- * Move the camera closer to peach appearing.
- */
-BAD_RETURN(s32) cutscene_ending_peach_appear_closeup(struct Camera *c) {
-    vec3f_set(c->pos, 179.f, 2463.f, -1216.f);
-    c->pos[1] = gCutsceneFocus->oPosY + 35.f;
-    vec3f_set(c->focus, gCutsceneFocus->oPosX, gCutsceneFocus->oPosY + 125.f, gCutsceneFocus->oPosZ);
-}
-
-/**
- * Peach fades in, the camera focuses on her.
- */
-BAD_RETURN(s32) cutscene_ending_peach_appears(struct Camera *c) {
-    cutscene_event(cutscene_ending_peach_appear_closeup, c, 0, 0);
-    approach_f32_asymptotic_bool(&c->pos[1], gCutsceneFocus->oPosY + 35.f, 0.02f);
-    approach_f32_asymptotic_bool(&c->focus[1], gCutsceneFocus->oPosY + 125.f, 0.15f);
-    player2_rotate_cam(c, -0x2000, 0x2000, -0x2000, 0x2000);
-}
-
-/**
- * Reset spline progress, set cvar2 y offset.
- */
-BAD_RETURN(s32) cutscene_ending_peach_descends_start(UNUSED struct Camera *c) {
-    cutscene_reset_spline();
-    sCutsceneVars[2].point[1] = 150.f;
-}
-
-/**
- * Follow the sEndingPeachDescentCamPos spline, which rotates around peach.
- */
-BAD_RETURN(s32) cutscene_ending_follow_peach_descent(struct Camera *c) {
-    move_point_along_spline(c->pos, sEndingPeachDescentCamPos, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    c->pos[1] += gCutsceneFocus->oPosY + sCutsceneVars[3].point[1];
-}
-
-/**
- * Decrease cvar2's y offset while the camera flies backwards to Mario.
- */
-BAD_RETURN(s32) cutscene_ending_peach_descent_lower_focus(UNUSED struct Camera *c) {
-    camera_approach_f32_symmetric_bool(&(sCutsceneVars[2].point[1]), 90.f, 0.5f);
-}
-
-/**
- * Keep following the sEndingPeachDescentCamPos spline, which leads back to Mario.
- */
-BAD_RETURN(s32) cutscene_ending_peach_descent_back_to_mario(struct Camera *c) {
-    Vec3f pos;
-
-    move_point_along_spline(pos, sEndingPeachDescentCamPos, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    c->pos[0] = pos[0];
-    c->pos[2] = pos[2];
-    approach_f32_asymptotic_bool(&c->pos[1], (pos[1] += gCutsceneFocus->oPosY), 0.07f);
-}
-
-/**
- * Peach starts floating to the ground. Rotate the camera around her, then fly backwards to Mario when
- * she lands.
- */
-BAD_RETURN(s32) cutscene_ending_peach_descends(struct Camera *c) {
-    cutscene_event(cutscene_ending_peach_descends_start, c, 0, 0);
-    cutscene_event(cutscene_ending_follow_peach_descent, c, 0, 299);
-    cutscene_event(cutscene_ending_peach_descent_back_to_mario, c, 300, -1);
-    cutscene_event(cutscene_ending_peach_descent_lower_focus, c, 300, -1);
-    vec3f_set(c->focus, gCutsceneFocus->oPosX, sCutsceneVars[2].point[1] + gCutsceneFocus->oPosY,
-              gCutsceneFocus->oPosZ);
-    player2_rotate_cam(c, -0x2000, 0x2000, -0x2000, 0x2000);
-}
-
-/**
- * Mario runs across the bridge to peach, and takes off his cap.
- * Follow the sEndingMarioToPeach* splines while Mario runs across.
- */
-BAD_RETURN(s32) cutscene_ending_mario_to_peach(struct Camera *c) {
-    cutscene_event(cutscene_ending_reset_spline, c, 0, 0);
-    move_point_along_spline(c->pos, sEndingMarioToPeachPos, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    move_point_along_spline(c->focus, sEndingMarioToPeachFocus, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    player2_rotate_cam(c, -0x2000, 0x2000, -0x2000, 0x2000);
-}
-
-/**
- * Make the focus follow the sEndingLookUpAtCastle spline.
- */
-BAD_RETURN(s32) cutscene_ending_look_up_at_castle(UNUSED struct Camera *c) {
-    move_point_along_spline(c->focus, sEndingLookUpAtCastle, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-}
-
-/**
- * Peach opens her eyes and the camera looks at the castle window again.
- */
-BAD_RETURN(s32) cutscene_ending_peach_wakeup(struct Camera *c) {
-    cutscene_event(cutscene_ending_reset_spline, c, 0, 0);
-    cutscene_event(cutscene_ending_look_up_at_castle, c, 0, 0);
-#ifdef VERSION_EU
-    cutscene_event(cutscene_ending_look_up_at_castle, c, 265, -1);
-    cutscene_spawn_obj(7, 315);
-    cutscene_spawn_obj(9, 355);
-#else
-    cutscene_event(cutscene_ending_look_up_at_castle, c, 250, -1);
-    cutscene_spawn_obj(7, 300);
-    cutscene_spawn_obj(9, 340);
-#endif
-    vec3f_set(c->pos, -163.f, 978.f, -1082.f);
-    player2_rotate_cam(c, -0x800, 0x2000, -0x2000, 0x2000);
-}
-
-/**
- * Side view of peach and Mario. Peach thanks Mario for saving her.
- */
-BAD_RETURN(s32) cutscene_ending_dialog(struct Camera *c) {
-    vec3f_set(c->focus, 11.f, 983.f, -1273.f);
-    vec3f_set(c->pos, -473.f, 970.f, -1152.f);
-    player2_rotate_cam(c, -0x800, 0x2000, -0x2000, 0x2000);
-}
-
-/**
- * Zoom in and move the camera close to Mario and peach.
- */
-BAD_RETURN(s32) cutscene_ending_kiss_closeup(struct Camera *c) {
-    set_fov_function(CAM_FOV_SET_29);
-    vec3f_set(c->focus, 350.f, 1034.f, -1216.f);
-    vec3f_set(c->pos, -149.f, 1021.f, -1216.f);
-}
-
-/**
- * Fly back and zoom out for Mario's spin after the kiss.
- */
-BAD_RETURN(s32) cutscene_ending_kiss_here_we_go(struct Camera *c) {
-    Vec3f pos, foc;
-
-    set_fov_function(CAM_FOV_DEFAULT);
-    vec3f_set(foc, 233.f, 1068.f, -1298.f);
-    vec3f_set(pos, -250.f, 966.f, -1111.f);
-    //! another double typo
-    approach_vec3f_asymptotic(c->pos, pos, 0.2, 0.1f, 0.2f);
-    approach_vec3f_asymptotic(c->focus, foc, 0.2, 0.1f, 0.2f);
-}
-
-/**
- * Peach kisses Mario on the nose.
- */
-BAD_RETURN(s32) cutscene_ending_kiss(struct Camera *c) {
-    cutscene_event(cutscene_ending_kiss_closeup, c, 0, 0);
-#ifdef VERSION_EU
-    cutscene_event(cutscene_ending_kiss_here_we_go, c, 185, -1);
-#else
-    cutscene_event(cutscene_ending_kiss_here_we_go, c, 155, -1);
-#endif
-    player2_rotate_cam(c, -0x800, 0x2000, -0x2000, 0x2000);
-}
-
-/**
- * Make the focus follow sEndingLookAtSkyFocus.
- */
-BAD_RETURN(s32) cutscene_ending_look_at_sky(struct Camera *c) {
-    move_point_along_spline(c->focus, sEndingLookAtSkyFocus, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    vec3f_set(c->pos, 699.f, 1680.f, -703.f);
-}
-
-/**
- * Zoom in the fov. The fovFunc was just set to default, so it wants to approach 45. But while this is
- * called, it will stay at about 37.26f
- */
-BAD_RETURN(s32) cutscene_ending_zoom_fov(UNUSED struct Camera *c) {
-    sFOVState.fov = 37.f;
-}
-
-/**
- * Peach suggests baking a cake for Mario. Mario looks back at the camera before going inside the castle.
- */
-BAD_RETURN(s32) cutscene_ending_cake_for_mario(struct Camera *c) {
-    cutscene_event(cutscene_ending_reset_spline, c, 0, 0);
-    cutscene_event(cutscene_ending_look_at_sky, c, 0, 0);
-    cutscene_event(cutscene_ending_zoom_fov, c, 0, 499);
-    cutscene_event(cutscene_ending_look_at_sky, c, 500, -1);
-    cutscene_spawn_obj(8, 600);
-    cutscene_spawn_obj(8, 608);
-    cutscene_spawn_obj(8, 624);
-    cutscene_spawn_obj(8, 710);
-}
-
-/**
- * Stop the ending cutscene, reset the fov.
- */
-BAD_RETURN(s32) cutscene_ending_stop(struct Camera *c) {
-    set_fov_function(CAM_FOV_SET_45);
-    c->cutscene = 0;
-    gCutsceneTimer = CUTSCENE_STOP;
-}
-
-/**
- * Start the grand star cutscene.
- * cvar0 is a relative offset from Mario.
- * cvar1 is the is the camera's goal position.
- */
-BAD_RETURN(s32) cutscene_grand_star_start(UNUSED struct Camera *c) {
-    vec3f_set(sCutsceneVars[0].point, 0.f, 150.f, -600.f);
-    offset_rotated(sCutsceneVars[1].point, sMarioCamState->pos, sCutsceneVars[0].point, sMarioCamState->faceAngle);
-    sCutsceneVars[1].point[1] = 457.f;
-}
-
-/**
- * Make the camera fly to the front of Mario.
- */
-BAD_RETURN(s32) cutscene_grand_star_front_of_mario(struct Camera *c) {
-    f32 goalDist;
-    s16 goalPitch, goalYaw;
-    f32 dist;
-    s16 pitch, yaw;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, sCutsceneVars[1].point, &goalDist, &goalPitch, &goalYaw);
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    approach_f32_asymptotic_bool(&dist, goalDist, 0.1f);
-    approach_s16_asymptotic_bool(&pitch, goalPitch, 32);
-    approach_s16_asymptotic_bool(&yaw, goalYaw + 0x1200, 20);
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-/**
- * Started shortly after Mario starts the triple jump. Stores Mario's face angle and zeros cvar2.
- */
-BAD_RETURN(s32) cutscene_grand_star_mario_jump(UNUSED struct Camera *c) {
-    vec3s_set(sCutsceneVars[0].angle, 0, sMarioCamState->faceAngle[1], 0);
-    vec3f_set(sCutsceneVars[2].point, 0.f, 0.f, 0.f);
-}
-
-/**
- * Accelerate cvar2 to point back and to the left (relative to the camera).
- */
-BAD_RETURN(s32) cutscene_grand_star_accel_cvar2(UNUSED struct Camera *c) {
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[2].point[2], -40.f, 2.0f);
-    sCutsceneVars[2].point[0] = 5.0f;
-}
-
-/**
- * Decrease cvar2 offset, follow Mario by directly updating the camera's pos.
- */
-BAD_RETURN(s32) cutscene_grand_star_approach_mario(struct Camera *c) {
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[2].point[2], 0.f, 2.f);
-    sCutsceneVars[2].point[0] = 0.f;
-    approach_f32_asymptotic_bool(&c->pos[0], sMarioCamState->pos[0], 0.01f);
-    approach_f32_asymptotic_bool(&c->pos[2], sMarioCamState->pos[2], 0.01f);
-}
-
-/**
- * Offset the camera's position by cvar2. Before Mario triple jumps, this moves back and to the left.
- * After the triple jump, cvar2 decelerates to 0.
- */
-BAD_RETURN(s32) cutscene_grand_star_move_cvar2(struct Camera *c) {
-    offset_rotated(c->pos, c->pos, sCutsceneVars[2].point, sCutsceneVars[0].angle);
-}
-
-BAD_RETURN(s32) cutscene_grand_star_focus_mario(struct Camera *c) {
-    Vec3f foc;
-
-    vec3f_set(foc, sMarioCamState->pos[0], (sMarioCamState->pos[1] - 307.f) * 0.5f + 407.f, sMarioCamState->pos[2]);
-    approach_vec3f_asymptotic(c->focus, foc, 0.5f, 0.8f, 0.5f);
-}
-
-/**
- * The first part of the grand star cutscene, after Mario has collected the grand star.
- */
-BAD_RETURN(s32) cutscene_grand_star(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    cutscene_event(cutscene_grand_star_start, c, 0, 0);
-    cutscene_event(cutscene_grand_star_front_of_mario, c, 0, 109);
-    cutscene_event(cutscene_grand_star_focus_mario, c, 0, -1);
-    cutscene_event(cutscene_grand_star_mario_jump, c, 110, 110);
-    cutscene_event(cutscene_grand_star_accel_cvar2, c, 110, 159);
-    cutscene_event(cutscene_grand_star_approach_mario, c, 160, -1);
-    cutscene_event(cutscene_grand_star_move_cvar2, c, 110, -1);
-}
-
-/**
- * Zero the cvars that are used when Mario is flying.
- */
-BAD_RETURN(s32) cutscene_grand_star_fly_start(struct Camera *c) {
-    //! cvar7 is unused in grand star
-    vec3f_set(sCutsceneVars[7].point, 0.5f, 0.5f, 0.5f);
-    //! cvar6 is unused in grand star
-    vec3f_set(sCutsceneVars[6].point, 0.01f, 0.01f, 0.01f);
-    vec3f_set(sCutsceneVars[4].point, 0.f, 0.f, 0.f);
-    vec3f_set(sCutsceneVars[5].point, 0.f, c->focus[1] - sMarioCamState->pos[1], 0.f);
-    sCutsceneVars[8].point[2] = 0.f;
-    sCutsceneVars[8].point[0] = 0.f;
-}
-
-/**
- * Decrease the cvar offsets so that Lakitu flies closer to Mario.
- */
-BAD_RETURN(s32) cutscene_grand_star_fly_move_to_mario(UNUSED struct Camera *c) {
-    Vec3f posOff;
-
-    vec3f_set(posOff, -600.f, 0.f, -400.f);
-    approach_vec3f_asymptotic(sCutsceneVars[4].point, posOff, 0.05f, 0.05f, 0.05f);
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[5].point[1], 0.f, 2.f);
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[5].point[2], -200.f, 6.f);
-}
-
-/**
- * Gradually increase the cvar offsets so Lakitu flies away. Mario flies offscreen to the right.
- *
- * cvar4 is the position offset from Mario.
- * cvar5 is the focus offset from Mario.
- * cvar8.point[0] is the approach velocity.
- */
-BAD_RETURN(s32) cutscene_grand_star_fly_mario_offscreen(UNUSED struct Camera *c) {
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[8].point[0], 15.f, 0.1f);
-
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[4].point[0], -2000.f, sCutsceneVars[8].point[0]);
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[4].point[1], 1200.f, sCutsceneVars[8].point[0] / 10.f);
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[4].point[2], 1000.f, sCutsceneVars[8].point[0] / 10.f);
-
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[5].point[0], 0.f, sCutsceneVars[8].point[0]);
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[5].point[1], 1200.f, sCutsceneVars[8].point[0] / 2);
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[5].point[2], 1000.f, sCutsceneVars[8].point[0] / 1.5f);
-}
-
-/**
- * Make Lakitu approach the cvars.
- * cvar4 is the position offset.
- * cvar5 is the focus offset.
- */
-BAD_RETURN(s32) cutscene_grand_star_fly_app_cvars(struct Camera *c) {
-    Vec3f goalPos, goalFoc;
-    f32 dist;
-    s16 pitch, yaw;
-
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[8].point[2], 90.f, 2.5f);
-    offset_rotated(goalPos, sMarioCamState->pos, sCutsceneVars[4].point, sMarioCamState->faceAngle);
-    offset_rotated(goalFoc, sMarioCamState->pos, sCutsceneVars[5].point, sMarioCamState->faceAngle);
-
-    // Move towards goalPos by cvar8's Z speed
-    vec3f_get_dist_and_angle(goalPos, c->pos, &dist, &pitch, &yaw);
-    camera_approach_f32_symmetric_bool(&dist, 0, sCutsceneVars[8].point[2]);
-    vec3f_set_dist_and_angle(goalPos, c->pos, dist, pitch, yaw);
-
-    approach_vec3f_asymptotic(c->pos, goalPos, 0.01f, 0.01f, 0.01f);
-    approach_vec3f_asymptotic(c->focus, goalFoc, 0.5f, 0.8f, 0.5f);
-}
-
-/**
- * Part of the grand star cutscene, starts after Mario is flying.
- *
- * cvar4 and cvar5 are directions, relative to Mario:
- * cvar4 is used as the camera position's offset from Mario.
- * cvar5 is used as the camera focus's offset from Mario.
- *
- * cvar8.point[2] is Lakitu's speed.
- */
-BAD_RETURN(s32) cutscene_grand_star_fly(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    cutscene_event(cutscene_grand_star_fly_start, c, 0, 0);
-    cutscene_event(cutscene_grand_star_fly_move_to_mario, c, 0, 140);
-    cutscene_event(cutscene_grand_star_fly_mario_offscreen, c, 141, -1);
-    cutscene_event(cutscene_grand_star_fly_app_cvars, c, 0, -1);
-}
-
-/**
- * Adjust the camera focus towards a point `dist` units in front of Mario.
- * @param dist distance in Mario's forward direction. Note that this is relative to Mario, so a negative
- *        distance will focus in front of Mario, and a positive distance will focus behind him.
- */
-void focus_in_front_of_mario(struct Camera *c, f32 dist, f32 speed) {
-    Vec3f goalFocus, offset;
-
-    offset[0] = 0.f;
-    offset[2] = dist;
-    offset[1] = 100.f;
-
-    offset_rotated(goalFocus, sMarioCamState->pos, offset, sMarioCamState->faceAngle);
-    approach_vec3f_asymptotic(c->focus, goalFocus, speed, speed, speed);
-}
-
-/**
- * Approach Mario and look up. Since Mario faces the camera when he collects the star, there's no need
- * to worry about the camera's yaw.
- */
-BAD_RETURN(s32) cutscene_dance_move_to_mario(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    approach_f32_asymptotic_bool(&dist, 600.f, 0.3f);
-    approach_s16_asymptotic_bool(&pitch, 0x1000, 0x10);
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-BAD_RETURN(s32) cutscene_dance_rotate(struct Camera *c) {
-    rotate_and_move_vec3f(c->pos, sMarioCamState->pos, 0, 0, 0x200);
-}
-
-BAD_RETURN(s32) cutscene_dance_rotate_move_back(struct Camera *c) {
-    rotate_and_move_vec3f(c->pos, sMarioCamState->pos, -15.f, 0, 0);
-}
-
-BAD_RETURN(s32) cutscene_dance_rotate_move_towards_mario(struct Camera *c) {
-    rotate_and_move_vec3f(c->pos, sMarioCamState->pos, 20.f, 0, 0);
-}
-
-/**
- * Speculated to be dance-related due to its proximity to the other dance functions
- */
-static BAD_RETURN(s32) cutscene_dance_unused(UNUSED struct Camera *c) {
-}
-
-/**
- * Slowly turn to the point 100 units in front of Mario
- */
-BAD_RETURN(s32) cutscene_dance_default_focus_mario(struct Camera *c) {
-    focus_in_front_of_mario(c, -100.f, 0.2f);
-}
-
-/**
- * Focus twice as far away as default dance, and move faster.
- */
-BAD_RETURN(s32) cutscene_dance_rotate_focus_mario(struct Camera *c) {
-    focus_in_front_of_mario(c, -200.f, 0.03f);
-}
-
-BAD_RETURN(s32) cutscene_dance_shake_fov(UNUSED struct Camera *c) {
-    set_fov_shake(0x200, 0x28, 0x8000);
-}
-
-/**
- * Handles both the default and rotate dance cutscenes.
- * In the default dance: the camera moves closer to Mario, then stays in place.
- * In the rotate dance: the camera moves closer and rotates clockwise around Mario.
- */
-BAD_RETURN(s32) cutscene_dance_default_rotate(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    sYawSpeed = 0;
-    set_fov_function(CAM_FOV_DEFAULT);
-    cutscene_event(cutscene_dance_default_focus_mario, c, 0, 20);
-    cutscene_event(cutscene_dance_move_to_mario, c, 0, 39);
-    // Shake the camera on the 4th beat of the music, when Mario gives the peace sign.
-    cutscene_event(cutscene_dance_shake_fov, c, 40, 40);
-
-    if (c->cutscene != CUTSCENE_DANCE_DEFAULT) { // CUTSCENE_DANCE_ROTATE
-        cutscene_event(cutscene_dance_rotate_focus_mario, c, 75, 102);
-        cutscene_event(cutscene_dance_rotate, c, 50, -1);
-        // These two functions move the camera away and then towards Mario.
-        cutscene_event(cutscene_dance_rotate_move_back, c, 50, 80);
-        cutscene_event(cutscene_dance_rotate_move_towards_mario, c, 70, 90);
-    } else {
-        // secret star, 100 coin star, or bowser red coin star.
-        if ((sMarioCamState->action != ACT_STAR_DANCE_NO_EXIT)
-            && (sMarioCamState->action != ACT_STAR_DANCE_WATER)
-            && (sMarioCamState->action != ACT_STAR_DANCE_EXIT)) {
-            gCutsceneTimer = CUTSCENE_STOP;
-            c->cutscene = 0;
-            transition_next_state(c, 20);
-            sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-        }
-    }
-}
-
-/**
- * If the camera's yaw is out of the range of `absYaw` +- `yawMax`, then set the yaw to `absYaw`
- */
-BAD_RETURN(s32) star_dance_bound_yaw(struct Camera *c, s16 absYaw, s16 yawMax) {
-    s16 dummyPitch, yaw;
-    f32 distCamToMario;
-    s16 yawFromAbs;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &distCamToMario, &dummyPitch, &yaw);
-    yawFromAbs = yaw - absYaw;
-
-    // Because angles are s16, this checks if yaw is negative
-    if ((yawFromAbs & 0x8000) != 0) {
-        yawFromAbs = -yawFromAbs;
-    }
-    if (yawFromAbs > yawMax) {
-        yaw = absYaw;
-        c->nextYaw = yaw;
-        c->yaw = yaw;
-    }
-}
-
-/**
- * Start the closeup dance cutscene by restricting the camera's yaw in certain areas.
- * Store the camera's focus in cvar9.
- */
-BAD_RETURN(s32) cutscene_dance_closeup_start(struct Camera *c) {
-    UNUSED s32 pad[2];
-
-    if ((gLastCompletedStarNum == 4) && (gCurrCourseNum == COURSE_JRB)) {
-        star_dance_bound_yaw(c, 0x0, 0x4000);
-    }
-    if ((gLastCompletedStarNum == 1) && (gCurrCourseNum == COURSE_DDD)) {
-        star_dance_bound_yaw(c, 0x8000, 0x5000);
-    }
-    if ((gLastCompletedStarNum == 5) && (gCurrCourseNum == COURSE_WDW)) {
-        star_dance_bound_yaw(c, 0x8000, 0x800);
-    }
-
-    vec3f_copy(sCutsceneVars[9].point, c->focus);
-    //! cvar8 is unused in the closeup cutscene
-    sCutsceneVars[8].angle[0] = 0x2000;
-}
-
-/**
- * Focus the camera on Mario eye height.
- */
-BAD_RETURN(s32) cutscene_dance_closeup_focus_mario(struct Camera *c) {
-    Vec3f marioPos;
-
-    vec3f_set(marioPos, sMarioCamState->pos[0], sMarioCamState->pos[1] + 125.f, sMarioCamState->pos[2]);
-    approach_vec3f_asymptotic(sCutsceneVars[9].point, marioPos, 0.2f, 0.2f, 0.2f);
-    vec3f_copy(c->focus, sCutsceneVars[9].point);
-}
-
-/**
- * Fly above Mario, looking down.
- */
-BAD_RETURN(s32) cutscene_dance_closeup_fly_above(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-    s16 goalPitch = 0x1800;
-
-    if ((gLastCompletedStarNum == 6 && gCurrCourseNum == COURSE_SL) ||
-        (gLastCompletedStarNum == 4 && gCurrCourseNum == COURSE_TTC)) {
-        goalPitch = 0x800;
-    }
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    approach_f32_asymptotic_bool(&dist, 800.f, 0.05f);
-    approach_s16_asymptotic_bool(&pitch, goalPitch, 16);
-    approach_s16_asymptotic_bool(&yaw, c->yaw, 8);
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-/**
- * Fly closer right when Mario gives the peace sign.
- */
-BAD_RETURN(s32) cutscene_dance_closeup_fly_closer(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    approach_f32_asymptotic_bool(&dist, 240.f, 0.4f);
-    approach_s16_asymptotic_bool(&yaw, c->yaw, 8);
-    approach_s16_asymptotic_bool(&pitch, 0x1000, 5);
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-/**
- * Zoom in by increasing fov to 80 degrees. Most dramatic zoom in the game.
- */
-BAD_RETURN(s32) cutscene_dance_closeup_zoom(UNUSED struct Camera *c) {
-    set_fov_function(CAM_FOV_APP_80);
-}
-
-/**
- * Shake fov, starts on the first frame Mario has the peace sign up.
- */
-BAD_RETURN(s32) cutscene_dance_closeup_shake_fov(UNUSED struct Camera *c) {
-    set_fov_shake(0x300, 0x30, 0x8000);
-}
-
-/**
- * The camera moves in for a closeup on Mario. Used for stars that are underwater or in tight places.
- */
-BAD_RETURN(s32) cutscene_dance_closeup(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-
-    if (sMarioCamState->action == ACT_STAR_DANCE_WATER) {
-        cutscene_event(cutscene_dance_closeup_start, c, 0, 0);
-        cutscene_event(cutscene_dance_closeup_focus_mario, c, 0, -1);
-        cutscene_event(cutscene_dance_closeup_fly_above, c, 0, 62);
-        cutscene_event(cutscene_dance_closeup_fly_closer, c, 63, -1);
-        cutscene_event(cutscene_dance_closeup_zoom, c, 63, 63);
-        cutscene_event(cutscene_dance_closeup_shake_fov, c, 70, 70);
-    } else {
-        cutscene_event(cutscene_dance_closeup_start, c, 0, 0);
-        cutscene_event(cutscene_dance_closeup_focus_mario, c, 0, -1);
-        // Almost twice as fast as under water
-        cutscene_event(cutscene_dance_closeup_fly_above, c, 0, 32);
-        cutscene_event(cutscene_dance_closeup_fly_closer, c, 33, -1);
-        cutscene_event(cutscene_dance_closeup_zoom, c, 33, 33);
-        cutscene_event(cutscene_dance_closeup_shake_fov, c, 40, 40);
-    }
-    set_handheld_shake(HAND_CAM_SHAKE_CUTSCENE);
-}
-
-/**
- * cvar8.point[2] is the amount to increase distance from Mario
- */
-BAD_RETURN(s32) cutscene_dance_fly_away_start(struct Camera *c) {
-    Vec3f areaCenter;
-
-    vec3f_copy(sCutsceneVars[9].point, c->focus);
-    sCutsceneVars[8].point[2] = 65.f;
-
-    if (c->mode == CAMERA_MODE_RADIAL) {
-        vec3f_set(areaCenter, c->areaCenX, c->areaCenY, c->areaCenZ);
-        c->yaw = calculate_yaw(areaCenter, c->pos);
-        c->nextYaw = c->yaw;
-    }
-
-    // Restrict the camera yaw in tight spaces
-    if ((gLastCompletedStarNum == 6) && (gCurrCourseNum == COURSE_CCM)) {
-        star_dance_bound_yaw(c, 0x5600, 0x800);
-    }
-    if ((gLastCompletedStarNum == 2) && (gCurrCourseNum == COURSE_TTM)) {
-        star_dance_bound_yaw(c, 0x0,    0x800);
-    }
-    if ((gLastCompletedStarNum == 1) && (gCurrCourseNum == COURSE_SL)) {
-        star_dance_bound_yaw(c, 0x2000, 0x800);
-    }
-    if ((gLastCompletedStarNum == 3) && (gCurrCourseNum == COURSE_RR)) {
-        star_dance_bound_yaw(c, 0x0,    0x800);
-    }
-}
-
-BAD_RETURN(s32) cutscene_dance_fly_away_approach_mario(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    approach_f32_asymptotic_bool(&dist, 600.f, 0.3f);
-    approach_s16_asymptotic_bool(&pitch, 0x1000, 16);
-    approach_s16_asymptotic_bool(&yaw, c->yaw, 8);
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-BAD_RETURN(s32) cutscene_dance_fly_away_focus_mario(struct Camera *c) {
-    Vec3f marioPos;
-
-    vec3f_set(marioPos, sMarioCamState->pos[0], sMarioCamState->pos[1] + 125.f, sMarioCamState->pos[2]);
-    approach_vec3f_asymptotic(sCutsceneVars[9].point, marioPos, 0.2f, 0.2f, 0.2f);
-    vec3f_copy(c->focus, sCutsceneVars[9].point);
-}
-
-/**
- * Slowly pan the camera downwards and to the camera's right, using cvar9's angle.
- */
-void cutscene_pan_cvar9(struct Camera *c) {
-    vec3f_copy(c->focus, sCutsceneVars[9].point);
-    sCutsceneVars[9].angle[0] -= 29;
-    sCutsceneVars[9].angle[1] += 29;
-    pan_camera(c, sCutsceneVars[9].angle[0], sCutsceneVars[9].angle[1]);
-}
-
-/**
- * Move backwards and rotate slowly around Mario.
- */
-BAD_RETURN(s32) cutscene_dance_fly_rotate_around_mario(struct Camera *c) {
-    cutscene_pan_cvar9(c);
-    rotate_and_move_vec3f(c->pos, sMarioCamState->pos, sCutsceneVars[8].point[2], 0, 0);
-}
-
-/**
- * Rotate quickly while Lakitu flies up.
- */
-BAD_RETURN(s32) cutscene_dance_fly_away_rotate_while_flying(struct Camera *c) {
-    rotate_and_move_vec3f(c->pos, sMarioCamState->pos, 0, 0, 0x80);
-}
-
-BAD_RETURN(s32) cutscene_dance_fly_away_shake_fov(UNUSED struct Camera *c) {
-    set_fov_shake(0x400, 0x30, 0x8000);
-}
-
-/**
- * After collecting the star, Lakitu flies upwards out of the course.
- */
-BAD_RETURN(s32) cutscene_dance_fly_away(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    cutscene_event(cutscene_dance_fly_away_start, c, 0, 0);
-    cutscene_event(cutscene_dance_fly_away_focus_mario, c, 0, 30);
-    cutscene_event(cutscene_dance_fly_away_approach_mario, c, 0, 30);
-    cutscene_event(cutscene_dance_fly_rotate_around_mario, c, 55, 124);
-    cutscene_event(cutscene_dance_fly_away_rotate_while_flying, c, 55, 124);
-    cutscene_event(cutscene_dance_fly_away_shake_fov, c, 40, 40);
-    set_fov_function(CAM_FOV_DEFAULT);
-    set_handheld_shake(HAND_CAM_SHAKE_STAR_DANCE);
-}
-
-/**
- * Jump the camera pos and focus to cvar 8 and 7.
- * Called every frame, starting after 10, so when these cvars are updated, the camera will jump.
- */
-BAD_RETURN(s32) cutscene_key_dance_jump_cvar(struct Camera *c) {
-    offset_rotated(c->pos, sMarioCamState->pos, sCutsceneVars[8].point, sMarioCamState->faceAngle);
-    offset_rotated(c->focus, sMarioCamState->pos, sCutsceneVars[7].point, sMarioCamState->faceAngle);
-}
-
-/**
- * Jump to a closeup view of Mario and the key.
- */
-BAD_RETURN(s32) cutscene_key_dance_jump_closeup(UNUSED struct Camera *c) {
-    vec3f_set(sCutsceneVars[8].point, 38.f, 171.f, -248.f);
-    vec3f_set(sCutsceneVars[7].point, -57.f, 51.f, 187.f);
-}
-
-/**
- * Jump to a view from the lower left (Mario's right).
- */
-BAD_RETURN(s32) cutscene_key_dance_jump_lower_left(UNUSED struct Camera *c) {
-    vec3f_set(sCutsceneVars[8].point, -178.f, 62.f, -132.f);
-    vec3f_set(sCutsceneVars[7].point, 299.f, 91.f, 58.f);
-}
-
-/**
- * Jump to a rotated view from above.
- */
-BAD_RETURN(s32) cutscene_key_dance_jump_above(UNUSED struct Camera *c) {
-    gLakituState.keyDanceRoll = 0x2800;
-    vec3f_set(sCutsceneVars[8].point, 89.f, 373.f, -304.f);
-    vec3f_set(sCutsceneVars[7].point, 0.f, 127.f, 0.f);
-}
-
-/**
- * Finally, jump to a further view, slightly to Mario's left.
- */
-BAD_RETURN(s32) cutscene_key_dance_jump_last(UNUSED struct Camera *c) {
-    gLakituState.keyDanceRoll = 0;
-    vec3f_set(sCutsceneVars[8].point, 135.f, 158.f, -673.f);
-    vec3f_set(sCutsceneVars[7].point, -20.f, 135.f, -198.f);
-}
-
-BAD_RETURN(s32) cutscene_key_dance_shake_fov(UNUSED struct Camera *c) {
-    set_fov_shake(0x180, 0x30, 0x8000);
-}
-
-BAD_RETURN(s32) cutscene_key_dance_handheld_shake(UNUSED struct Camera *c) {
-    set_handheld_shake(HAND_CAM_SHAKE_CUTSCENE);
-}
-
-BAD_RETURN(s32) cutscene_key_dance_focus_mario(struct Camera *c) {
-    focus_in_front_of_mario(c, 0, 0.2f);
-}
-
-/**
- * Cutscene that plays when Mario collects a key from bowser. It's basically a sequence of four jump
- * cuts.
- */
-BAD_RETURN(s32) cutscene_key_dance(struct Camera *c) {
-    cutscene_event(cutscene_dance_move_to_mario, c, 0, 10);
-    cutscene_event(cutscene_key_dance_focus_mario, c, 0, 10);
-    cutscene_event(cutscene_key_dance_jump_closeup, c, 0, 0);
-    cutscene_event(cutscene_key_dance_jump_lower_left, c, 20, 20);
-    cutscene_event(cutscene_key_dance_jump_above, c, 35, 35);
-    cutscene_event(cutscene_key_dance_jump_last, c, 52, 52);
-    cutscene_event(cutscene_key_dance_jump_cvar, c, 11, -1);
-    cutscene_event(cutscene_key_dance_shake_fov, c, 54, 54);
-    cutscene_event(cutscene_key_dance_handheld_shake, c, 52, -1);
-}
-
-BAD_RETURN(s32) cutscene_bowser_area_shake_fov(UNUSED struct Camera *c) {
-    cutscene_set_fov_shake_preset(2);
-}
-
-/**
- * Set oBowserUnk88 to 1, which causes bowser to start walking.
- */
-BAD_RETURN(s32) cutscene_bowser_area_start_bowser_walking(UNUSED struct Camera *c) {
-    gSecondCameraFocus->oBowserUnk88 = 1;
-}
-
-/**
- * Offset the camera from bowser using cvar2 and cvar3
- * @bug cvar2.point is (0,0,0) on the first frame, but because of the warp transition, this behavior
- *      isn't seen. After the first frame, cvar2.point is bowser's position.
- */
-BAD_RETURN(s32) cutscene_bowser_arena_set_pos(struct Camera *c) {
-    vec3f_set_dist_and_angle(sCutsceneVars[2].point, c->pos, sCutsceneVars[3].point[2],
-                                  sCutsceneVars[3].angle[0], sCutsceneVars[3].angle[1]);
-    vec3f_set(sCutsceneVars[2].point, gSecondCameraFocus->oPosX, gSecondCameraFocus->oPosY,
-              gSecondCameraFocus->oPosZ);
-}
-
-/**
- * Apply a sine wave to the focus's y coordinate.
- * The y offset starts at 120, then decreases to 0 before reaching ~240 on the last frame.
- */
-BAD_RETURN(s32) cutscene_bowser_arena_focus_sine(UNUSED struct Camera *c) {
-    //! unused initialization
-    f32 yOff = 150.0f;
-
-    // cvar4 was zeroed when the cutscene started.
-    yOff = sins(sCutsceneVars[4].angle[1]) * 120.0f + 120.0f;
-    sCutsceneVars[4].angle[1] -= 0x200;
-    approach_f32_asymptotic_bool(&sCutsceneVars[0].point[1], yOff, 0.5f);
-}
-
-/**
- * Set the camera focus according to cvar0 and cvar2.
- */
-BAD_RETURN(s32) cutscene_bowser_arena_set_focus(struct Camera *c) {
-    offset_rotated(c->focus, sCutsceneVars[2].point, sCutsceneVars[0].point, sCutsceneVars[2].angle);
-}
-
-/**
- * Adjust the cvar offsets, making the camera look up, move slightly further back, and focus a little
- * further in front of bowser.
- */
-BAD_RETURN(s32) cutscene_bowser_arena_adjust_offsets(UNUSED struct Camera *c) {
-    approach_s16_asymptotic_bool(&sCutsceneVars[3].angle[0], 0x6C8, 30);
-    approach_f32_asymptotic_bool(&sCutsceneVars[0].point[2], -200.f, 0.02f);
-    approach_f32_asymptotic_bool(&sCutsceneVars[3].point[2], 550.f, 0.02f);
-}
-
-/**
- * Decrease cvar0's z offset, making the camera focus pan left towards bowser.
- */
-BAD_RETURN(s32) cutscene_bowser_arena_pan_left(UNUSED struct Camera *c) {
-    approach_f32_asymptotic_bool(&sCutsceneVars[0].point[2], 0.f, 0.05f);
-}
-
-/**
- * Duplicate of cutscene_mario_dialog().
- */
-BAD_RETURN(s32) cutscene_bowser_arena_mario_dialog(UNUSED struct Camera *c) {
-    cutscene_common_set_dialog_state(1);
-}
-
-void cutscene_stop_dialog(UNUSED struct Camera *c) {
-    cutscene_common_set_dialog_state(0);
-}
-
-/**
- * Active for the first 5 frames of the cutscene.
- * cvar3 is the camera's polar offset from bowser
- * cvar2.angle is bowser's move angle
- *
- * cvar0 is the focus offset from bowser
- */
-BAD_RETURN(s32) cutscene_bowser_arena_start(struct Camera *c) {
-    sCutsceneVars[3].point[2] = 430.f;
-    sCutsceneVars[3].angle[1] = gSecondCameraFocus->oMoveAngleYaw - DEGREES(45);
-    sCutsceneVars[3].angle[0] = 0xD90;
-
-    //! Tricky math: Bowser starts at (0, 307, -1000), with a moveAngle of (0,0,0). A sane person would
-    //! expect this offset to move the focus to (0, 427, -1800).
-    //! BUT because offset_rotated() flips the Z direction (to match sm64's coordinate system), this
-    //! offset actually moves the focus to (0, 427, -200)
-    vec3f_set(sCutsceneVars[0].point, 0.f, 120.f, -800.f);
-    vec3s_set(sCutsceneVars[2].angle, gSecondCameraFocus->oMoveAnglePitch,
-              gSecondCameraFocus->oMoveAngleYaw, gSecondCameraFocus->oMoveAngleRoll);
-
-    // Set the camera's position and focus.
-    cutscene_bowser_arena_set_pos(c);
-    cutscene_bowser_arena_set_focus(c);
-}
-
-/**
- * Create the dialog box depending on which bowser fight Mario is in.
- */
-BAD_RETURN(s32) bowser_fight_intro_dialog(UNUSED struct Camera *c) {
-    s16 dialog;
-
-    switch (gCurrLevelNum) {
-        case LEVEL_BOWSER_1:
-            dialog = DIALOG_067;
-            break;
-        case LEVEL_BOWSER_2:
-            dialog = DIALOG_092;
-            break;
-        default:
-            dialog = DIALOG_093;
-    }
-
-    create_dialog_box(dialog);
-}
-
-/**
- * Create the dialog box and wait until it's gone.
- */
-BAD_RETURN(s32) cutscene_bowser_arena_dialog(struct Camera *c) {
-    cutscene_event(bowser_fight_intro_dialog, c, 0, 0);
-
-    if (get_dialog_id() == -1) {
-        gCutsceneTimer = CUTSCENE_LOOP;
-    }
-}
-
-/**
- * End the bowser arena cutscene.
- */
-BAD_RETURN(s32) cutscene_bowser_arena_end(struct Camera *c) {
-    cutscene_stop_dialog(c);
-    c->cutscene = 0;
-    transition_next_state(c, 20);
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-    sModeOffsetYaw = sMarioCamState->faceAngle[1] + DEGREES(90);
-    gSecondCameraFocus->oBowserUnk88 = 2;
-}
-
-/**
- * Cutscene that plays when Mario enters a bowser fight.
- */
-BAD_RETURN(s32) cutscene_bowser_arena(struct Camera *c) {
-    //! This does nothing, but may have been used in development
-    cutscene_spawn_obj(2, 0);
-
-    if (gSecondCameraFocus != NULL) {
-        cutscene_event(cutscene_bowser_arena_mario_dialog, c, 0, -1);
-        cutscene_event(cutscene_bowser_arena_start, c, 0, 5);
-        cutscene_event(cutscene_bowser_area_start_bowser_walking, c, 40, 40);
-        cutscene_event(cutscene_bowser_area_shake_fov, c, 145, 145);
-        cutscene_event(cutscene_bowser_arena_set_pos, c, 40, -1);
-        cutscene_event(cutscene_bowser_arena_pan_left, c, 40, 99);
-        cutscene_event(cutscene_bowser_arena_adjust_offsets, c, 100, -1);
-        cutscene_event(cutscene_bowser_arena_focus_sine, c, 40, 140);
-        cutscene_event(cutscene_bowser_arena_set_focus, c, 40, -1);
-        cutscene_event(cutscene_shake_explosion, c, 60, 60);
-        cutscene_event(cutscene_shake_explosion, c, 82, 82);
-        cutscene_event(cutscene_shake_explosion, c, 109, 109);
-        cutscene_event(cutscene_shake_explosion, c, 127, 127);
-    }
-}
-
-BAD_RETURN(s32) cutscene_star_spawn_store_info(struct Camera *c) {
-    store_info_star(c);
-}
-
-/**
- * Focus on the top of the star.
- */
-BAD_RETURN(s32) cutscene_star_spawn_focus_star(struct Camera *c) {
-    UNUSED f32 hMul;
-    Vec3f starPos;
-    UNUSED f32 vMul;
-
-    if (gCutsceneFocus != NULL) {
-        object_pos_to_vec3f(starPos, gCutsceneFocus);
-        starPos[1] += gCutsceneFocus->hitboxHeight;
-        approach_vec3f_asymptotic(c->focus, starPos, 0.1f, 0.1f, 0.1f);
-    }
-}
-
-/**
- * Use boss fight mode's update function to move the focus back.
- */
-BAD_RETURN(s32) cutscene_star_spawn_update_boss_fight(struct Camera *c) {
-    Vec3f pos, focus;
-
-    update_boss_fight_camera(c, focus, pos);
-    approach_vec3f_asymptotic(c->focus, focus, 0.2f, 0.2f, 0.2f);
-    approach_vec3f_asymptotic(c->pos, pos, 0.2f, 0.2f, 0.2f);
-}
-
-/**
- * Fly back to the camera's previous pos and focus.
- */
-BAD_RETURN(s32) cutscene_star_spawn_fly_back(struct Camera *c) {
-    retrieve_info_star(c);
-    transition_next_state(c, 15);
-}
-
-/**
- * Plays when a star spawns (ie from a box).
- */
-BAD_RETURN(s32) cutscene_star_spawn(struct Camera *c) {
-    cutscene_event(cutscene_star_spawn_store_info, c, 0, 0);
-    cutscene_event(cutscene_star_spawn_focus_star, c, 0, -1);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-
-    if (gObjCutsceneDone) {
-        // Set the timer to CUTSCENE_LOOP, which start the next shot.
-        gCutsceneTimer = CUTSCENE_LOOP;
-    }
-}
-
-/**
- * Move the camera back to Mario.
- */
-BAD_RETURN(s32) cutscene_star_spawn_back(struct Camera *c) {
-    if ((c->mode == CAMERA_MODE_BOSS_FIGHT) && (set_cam_angle(0) == CAM_ANGLE_LAKITU)) {
-        cutscene_event(cutscene_star_spawn_update_boss_fight, c, 0, -1);
-    } else {
-        cutscene_event(cutscene_star_spawn_fly_back, c, 0, 0);
-    }
-
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-}
-
-BAD_RETURN(s32) cutscene_star_spawn_end(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    gCutsceneTimer = CUTSCENE_STOP;
-    c->cutscene = 0;
-}
-
-BAD_RETURN(s32) cutscene_exit_waterfall_warp(struct Camera *c) {
-    //! hardcoded position
-    vec3f_set(c->pos, -3899.f, 39.f, -5671.f);
-}
-
-/**
- * Look at Mario, used by cutscenes that play when Mario exits a course to castle grounds.
- */
-BAD_RETURN(s32) cutscene_exit_to_castle_grounds_focus_mario(struct Camera *c) {
-    vec3f_copy(c->focus, sMarioCamState->pos);
-    c->focus[1] = c->pos[1] + (sMarioCamState->pos[1] + 125.f - c->pos[1]) * 0.5f;
-    approach_vec3f_asymptotic(c->focus, sMarioCamState->pos, 0.05f, 0.4f, 0.05f);
-}
-
-/**
- * Cutscene that plays when Mario leaves CotMC through the waterfall.
- */
-BAD_RETURN(s32) cutscene_exit_waterfall(struct Camera *c) {
-    cutscene_event(cutscene_exit_waterfall_warp, c, 0, 0);
-    cutscene_event(cutscene_exit_to_castle_grounds_focus_mario, c, 0, -1);
-    update_camera_yaw(c);
-}
-
-/**
- * End the cutscene, used by cutscenes that play when Mario exits a course to castle grounds.
- */
-BAD_RETURN(s32) cutscene_exit_to_castle_grounds_end(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    gCutsceneTimer = CUTSCENE_STOP;
-    c->cutscene = 0;
-    update_camera_yaw(c);
-}
-
-BAD_RETURN(s32) cutscene_exit_fall_to_castle_grounds_warp(struct Camera *c) {
-    //! hardcoded position
-    vec3f_set(c->pos, 5830.f, 32.f, 3985.f);
-}
-
-/**
- * Cutscene that plays when Mario falls from WMOTR.
- */
-BAD_RETURN(s32) cutscene_exit_fall_to_castle_grounds(struct Camera *c) {
-    cutscene_event(cutscene_exit_fall_to_castle_grounds_warp, c, 0, 0);
-    cutscene_event(cutscene_exit_to_castle_grounds_focus_mario, c, 0, -1);
-    update_camera_yaw(c);
-}
-
-/**
- * Start the red coin star spawning cutscene.
- */
-BAD_RETURN(s32) cutscene_red_coin_star_start(struct Camera *c) {
-    object_pos_to_vec3f(sCutsceneVars[1].point, gCutsceneFocus);
-    store_info_star(c);
-    // Store the default fov for after the cutscene
-    sCutsceneVars[2].point[2] = sFOVState.fov;
-}
-
-/**
- * Look towards the star's x and z position
- */
-BAD_RETURN(s32) cutscene_red_coin_star_focus_xz(struct Camera *c) {
-    approach_f32_asymptotic_bool(&c->focus[0], gCutsceneFocus->oPosX, 0.15f);
-    approach_f32_asymptotic_bool(&c->focus[2], gCutsceneFocus->oPosZ, 0.15f);
-}
-
-/**
- * Look towards the star's y position. Only active before the camera warp.
- */
-BAD_RETURN(s32) cutscene_red_coin_star_focus_y(struct Camera *c) {
-    approach_f32_asymptotic_bool(&c->focus[1], gCutsceneFocus->oPosY, 0.1f);
-}
-
-/**
- * Look 80% up towards the star. Only active after the camera warp.
- */
-BAD_RETURN(s32) cutscene_red_coin_star_look_up_at_star(struct Camera *c) {
-    c->focus[1] = sCutsceneVars[1].point[1] + (gCutsceneFocus->oPosY - sCutsceneVars[1].point[1]) * 0.8f;
-}
-
-/**
- * Warp the camera near the star's spawn point
- */
-BAD_RETURN(s32) cutscene_red_coin_star_warp(struct Camera *c) {
-    f32 dist;
-    s16 pitch, yaw, posYaw;
-    struct Object *o = gCutsceneFocus;
-
-    vec3f_set(sCutsceneVars[1].point, o->oHomeX, o->oHomeY, o->oHomeZ);
-    vec3f_get_dist_and_angle(sCutsceneVars[1].point, c->pos, &dist, &pitch, &yaw);
-    posYaw = calculate_yaw(sCutsceneVars[1].point, c->pos);
-    yaw = calculate_yaw(sCutsceneVars[1].point, sMarioCamState->pos);
-
-    if (ABS(yaw - posYaw + DEGREES(90)) < ABS(yaw - posYaw - DEGREES(90))) {
-        yaw += DEGREES(90);
-    } else {
-        yaw -= DEGREES(90);
-    }
-
-    vec3f_set_dist_and_angle(sCutsceneVars[1].point, c->pos, 400.f, 0x1000, yaw);
-    sStatusFlags &= ~CAM_FLAG_SMOOTH_MOVEMENT;
-}
-
-/**
- * Zoom out while looking at the star.
- */
-BAD_RETURN(s32) cutscene_red_coin_star_set_fov(UNUSED struct Camera *c) {
-    sFOVState.fov = 60.f;
-}
-
-BAD_RETURN(s32) cutscene_red_coin_star(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    cutscene_event(cutscene_red_coin_star_start, c, 0, 0);
-    cutscene_event(cutscene_red_coin_star_warp, c, 30, 30);
-    cutscene_event(cutscene_red_coin_star_focus_xz, c, 0, -1);
-    cutscene_event(cutscene_red_coin_star_focus_y, c, 0, 29);
-    cutscene_event(cutscene_red_coin_star_look_up_at_star, c, 30, -1);
-    cutscene_event(cutscene_red_coin_star_set_fov, c, 30, -1);
-
-    if (gObjCutsceneDone) {
-        // Set the timer to CUTSCENE_LOOP, which start the next shot.
-        gCutsceneTimer = CUTSCENE_LOOP;
-    }
-}
-
-/**
- * End the red coin star spawning cutscene
- */
-BAD_RETURN(s32) cutscene_red_coin_star_end(struct Camera *c) {
-    retrieve_info_star(c);
-    gCutsceneTimer = CUTSCENE_STOP;
-    c->cutscene = 0;
-    // Restore the default fov
-    sFOVState.fov = sCutsceneVars[2].point[2];
-}
-
-/**
- * Moves the camera towards the cutscene's focus, stored in sCutsceneVars[3].point
- *
- * sCutsceneVars[3].point is used as the target point
- * sCutsceneVars[0].point is used as the current camera focus during the transition
- *
- * @param rotPitch constant pitch offset to add to the camera's focus
- * @param rotYaw constant yaw offset to add to the camera's focus
- */
-void cutscene_goto_cvar_pos(struct Camera *c, f32 goalDist, s16 goalPitch, s16 rotPitch, s16 rotYaw) {
-    UNUSED f32 unused1;
-    f32 nextDist;
-    s16 nextPitch, nextYaw;
-    // The next 2 polar coord points are only used in CUTSCENE_PREPARE_CANNON
-    f32 cannonDist;
-    s16 cannonPitch, cannonYaw;
-    f32 curDist;
-    s16 curPitch, curYaw;
-    UNUSED f64 unused2;
-    vec3f_get_dist_and_angle(sCutsceneVars[3].point, c->pos, &nextDist, &nextPitch, &nextYaw);
-    // If over 8000 units away from the cannon, just teleport there
-    if ((nextDist > 8000.f) && (c->cutscene == CUTSCENE_PREPARE_CANNON)) {
-        nextDist = goalDist * 4.f;
-        nextPitch = goalPitch;
-        vec3f_copy(sCutsceneVars[0].point, sCutsceneVars[3].point);
-        sStatusFlags &= ~CAM_FLAG_SMOOTH_MOVEMENT;
-
-        if (gCurrLevelNum == LEVEL_TTM) {
-            nextYaw = atan2s(sCutsceneVars[3].point[2] - c->areaCenZ,
-                             sCutsceneVars[3].point[0] - c->areaCenX);
-        }
-    } else {
-        if (c->cutscene == CUTSCENE_PREPARE_CANNON) {
-            vec3f_get_dist_and_angle(c->pos, sCutsceneVars[0].point, &curDist, &curPitch, &curYaw);
-            vec3f_get_dist_and_angle(c->pos, sCutsceneVars[3].point, &cannonDist, &cannonPitch, &cannonYaw);
-            approach_f32_asymptotic_bool(&curDist, cannonDist, 0.1f);
-            approach_s16_asymptotic_bool(&curPitch, cannonPitch, 15);
-            approach_s16_asymptotic_bool(&curYaw, cannonYaw, 15);
-            // Move the current focus, sCutsceneVars[0].point, in the direction towards the cannon
-            vec3f_set_dist_and_angle(c->pos, sCutsceneVars[0].point, curDist, curPitch, curYaw);
-        } else {
-            approach_vec3f_asymptotic(sCutsceneVars[0].point, sCutsceneVars[3].point, 0.1f, 0.1f, 0.1f);
-        }
-    }
-
-    approach_f32_asymptotic_bool(&nextDist, goalDist, 0.05f);
-    approach_s16_asymptotic_bool(&nextPitch, goalPitch, 0x20);
-
-    vec3f_set_dist_and_angle(sCutsceneVars[3].point, c->pos, nextDist, nextPitch, nextYaw);
-    vec3f_copy(c->focus, sCutsceneVars[0].point);
-
-    // Apply the constant rotation given
-    pan_camera(c, rotPitch, rotYaw);
-    vec3f_get_dist_and_angle(c->pos, c->focus, &nextDist, &nextPitch, &nextYaw);
-
-    if (nextPitch < -0x3000) {
-        nextPitch = -0x3000;
-    }
-    if (nextPitch > 0x3000) {
-        nextPitch = 0x3000;
-    }
-
-    vec3f_set_dist_and_angle(c->pos, c->focus, nextDist, nextPitch, nextYaw);
-}
-
-/**
- * Store the camera's pos and focus, and copy the cannon's position to cvars.
- */
-BAD_RETURN(s32) cutscene_prepare_cannon_start(struct Camera *c) {
-    store_info_cannon(c);
-    vec3f_copy(sCutsceneVars[0].point, c->focus);
-    sCutsceneVars[2].point[0] = 30.f;
-    // Store the cannon door's position in sCutsceneVars[3]'s point
-    object_pos_to_vec3f(sCutsceneVars[3].point, gCutsceneFocus);
-    vec3s_set(sCutsceneVars[5].angle, 0, 0, 0);
-}
-
-/**
- * Fly towards the cannon door.
- */
-BAD_RETURN(s32) cutscene_prepare_cannon_fly_to_cannon(struct Camera *c) {
-    cutscene_goto_cvar_pos(c, 300.f, 0x2000, 0, sCutsceneVars[5].angle[1]);
-    camera_approach_s16_symmetric_bool(&sCutsceneVars[5].angle[1], 0x400, 17);
-    set_handheld_shake(HAND_CAM_SHAKE_CUTSCENE);
-}
-
-/**
- * Used in the cannon opening cutscene to fly back to the camera's last position and focus
- */
-void cannon_approach_prev(f32 *value, f32 target) {
-    f32 inc = ABS(target - *value) / sCutsceneVars[2].point[0];
-    camera_approach_f32_symmetric_bool(value, target, inc);
-}
-
-/**
- * Fly or warp back to the previous pos and focus, stored in sCameraStoreCutscene.
- */
-BAD_RETURN(s32) cutscene_prepare_cannon_fly_back(struct Camera *c) {
-    f32 distToPrevPos = calc_abs_dist(c->pos, sCameraStoreCutscene.pos);
-
-    if (distToPrevPos < 8000.f) {
-        cannon_approach_prev(&c->pos[0], sCameraStoreCutscene.pos[0]);
-        cannon_approach_prev(&c->pos[1], sCameraStoreCutscene.pos[1]);
-        cannon_approach_prev(&c->pos[2], sCameraStoreCutscene.pos[2]);
-        cannon_approach_prev(&c->focus[0], sCameraStoreCutscene.focus[0]);
-        cannon_approach_prev(&c->focus[1], sCameraStoreCutscene.focus[1]);
-        cannon_approach_prev(&c->focus[2], sCameraStoreCutscene.focus[2]);
-    } else {
-        // If too far away, just warp back
-        vec3f_copy(c->focus, sCameraStoreCutscene.focus);
-        vec3f_copy(c->pos, sCameraStoreCutscene.pos);
-        sStatusFlags &= ~CAM_FLAG_SMOOTH_MOVEMENT;
-    }
-    if (sCutsceneVars[2].point[0] > 1.f) {
-        sCutsceneVars[2].point[0] -= 1.f;
-    }
-}
-
-/**
- * Cutscene that plays when the cannon is opened.
- */
-BAD_RETURN(s32) cutscene_prepare_cannon(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    cutscene_event(cutscene_prepare_cannon_start, c, 0, 0);
-    cutscene_event(cutscene_prepare_cannon_fly_to_cannon, c, 0, 140);
-    cutscene_event(cutscene_prepare_cannon_fly_back, c, 141, -1);
-}
-
-/**
- * Stop the cannon opening cutscene.
- */
-BAD_RETURN(s32) cutscene_prepare_cannon_end(struct Camera *c) {
-    gCutsceneTimer = CUTSCENE_STOP;
-    c->cutscene = 0;
-    retrieve_info_cannon(c);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-}
-
-/**
- * Moves the camera to Mario's side when Mario starts ACT_WATER_DEATH
- * Note that ACT_WATER_DEATH only starts when Mario gets hit by an enemy under water. It does not start
- * when Mario drowns.
- */
-void water_death_move_to_mario_side(struct Camera *c) {
-    f32 dist;
-    s16 pitch, yaw;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    approach_s16_asymptotic_bool(&yaw, (sMarioCamState->faceAngle[1] - 0x3000), 8);
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-/**
- * Unnecessary, only used in cutscene_death_standing_goto_mario()
- */
-void death_goto_mario(struct Camera *c) {
-    cutscene_goto_cvar_pos(c, 400.f, 0x1000, 0x300, 0);
-}
-
-BAD_RETURN(s32) cutscene_death_standing_start(struct Camera *c) {
-    vec3f_copy(sCutsceneVars[0].point, c->focus);
-    vec3f_copy(sCutsceneVars[3].point, sMarioCamState->pos);
-    sCutsceneVars[3].point[1] += 70.f;
-}
-
-/**
- * Fly to Mario and turn on handheld shake.
- */
-BAD_RETURN(s32) cutscene_death_standing_goto_mario(struct Camera *c) {
-    death_goto_mario(c);
-    set_handheld_shake(HAND_CAM_SHAKE_HIGH);
-}
-
-/**
- * Cutscene that plays when Mario dies while standing.
- */
-BAD_RETURN(s32) cutscene_death_standing(struct Camera *c) {
-    cutscene_event(cutscene_death_standing_start, c, 0, 0);
-    cutscene_event(cutscene_death_standing_goto_mario, c, 0, -1);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-}
-
-BAD_RETURN(s32) cutscene_death_stomach_start(struct Camera *c) {
-    Vec3f offset = { 0, 40.f, -60.f };
-
-    offset_rotated(sCutsceneVars[3].point, sMarioCamState->pos, offset, sMarioCamState->faceAngle);
-    vec3f_copy(sCutsceneVars[0].point, c->focus);
-}
-
-BAD_RETURN(s32) cutscene_death_stomach_goto_mario(struct Camera *c) {
-    cutscene_goto_cvar_pos(c, 400.f, 0x1800, 0, -0x400);
-}
-
-/**
- * Ah, yes
- */
-static void unused_water_death_move_to_side_of_mario(struct Camera *c) {
-    water_death_move_to_mario_side(c);
-}
-
-/**
- * Cutscene that plays when Mario dies on his stomach.
- */
-BAD_RETURN(s32) cutscene_death_stomach(struct Camera *c) {
-    cutscene_event(cutscene_death_stomach_start, c, 0, 0);
-    cutscene_event(cutscene_death_stomach_goto_mario, c, 0, -1);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    set_handheld_shake(HAND_CAM_SHAKE_CUTSCENE);
-}
-
-BAD_RETURN(s32) cutscene_bbh_death_start(struct Camera *c) {
-    Vec3f dir = { 0, 40.f, 60.f };
-
-    offset_rotated(sCutsceneVars[3].point, sMarioCamState->pos, dir, sMarioCamState->faceAngle);
-    vec3f_copy(sCutsceneVars[0].point, c->focus);
-}
-
-BAD_RETURN(s32) cutscene_bbh_death_goto_mario(struct Camera *c) {
-    cutscene_goto_cvar_pos(c, 400.f, 0x1800, 0, 0x400);
-}
-
-/**
- * Cutscene that plays when Mario dies in BBH.
- */
-BAD_RETURN(s32) cutscene_bbh_death(struct Camera *c) {
-    cutscene_event(cutscene_bbh_death_start, c, 0, 0);
-    cutscene_event(cutscene_bbh_death_goto_mario, c, 0, -1);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    set_handheld_shake(HAND_CAM_SHAKE_CUTSCENE);
-}
-
-/**
- * Copy the camera's focus to cvar0
- */
-BAD_RETURN(s32) cutscene_quicksand_death_start(struct Camera *c) {
-    vec3f_copy(sCutsceneVars[0].point, c->focus);
-}
-
-/**
- * Fly closer to Mario. In WATER_DEATH, move to Mario's side.
- */
-BAD_RETURN(s32) cutscene_quicksand_death_goto_mario(struct Camera *c) {
-    cutscene_goto_cvar_pos(c, 400.f, 0x2800, 0x200, 0);
-
-    if (c->cutscene == CUTSCENE_WATER_DEATH) {
-        water_death_move_to_mario_side(c);
-    }
-}
-
-/**
- * Cutscene that plays when Mario dies in quicksand.
- */
-BAD_RETURN(s32) cutscene_quicksand_death(struct Camera *c) {
-    sCutsceneVars[3].point[0] = sMarioCamState->pos[0];
-    sCutsceneVars[3].point[1] = sMarioCamState->pos[1] + 20.f;
-    sCutsceneVars[3].point[2] = sMarioCamState->pos[2];
-
-    cutscene_event(cutscene_quicksand_death_start, c, 0, 0);
-    cutscene_event(cutscene_quicksand_death_goto_mario, c, 0, -1);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    set_handheld_shake(HAND_CAM_SHAKE_HIGH);
-}
-
-/**
- * Fly away from Mario near the end of the cutscene.
- */
-BAD_RETURN(s32) cutscene_suffocation_fly_away(UNUSED struct Camera *c) {
-    Vec3f target;
-    Vec3f offset = { 0, 20.f, 120.f };
-
-    offset_rotated(target, sMarioCamState->pos, offset, sMarioCamState->faceAngle);
-    approach_vec3f_asymptotic(sCutsceneVars[3].point, target, 0.1f, 0.1f, 0.1f);
-}
-
-/**
- * Keep Lakitu above the gas level.
- */
-BAD_RETURN(s32) cutscene_suffocation_stay_above_gas(struct Camera *c) {
-    UNUSED f32 unused1;
-    f32 gasLevel;
-    UNUSED f32 unused2;
-
-    cutscene_goto_cvar_pos(c, 400.f, 0x2800, 0x200, 0);
-    gasLevel = find_poison_gas_level(sMarioCamState->pos[0], sMarioCamState->pos[2]);
-
-    if (gasLevel != FLOOR_LOWER_LIMIT) {
-        if ((gasLevel += 130.f) > c->pos[1]) {
-            c->pos[1] = gasLevel;
-        }
-    }
-}
-
-/**
- * Quickly rotate around Mario.
- */
-BAD_RETURN(s32) cutscene_suffocation_rotate(struct Camera *c) {
-    f32 dist;
-    s16 pitch, yaw;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    yaw += 0x100;
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-/**
- * Cutscene that plays when Mario dies from suffocation (ie due to HMC gas).
- */
-BAD_RETURN(s32) cutscene_suffocation(struct Camera *c) {
-    cutscene_event(cutscene_death_stomach_start, c, 0, 0);
-    cutscene_event(cutscene_suffocation_rotate, c, 0, -1);
-    cutscene_event(cutscene_suffocation_stay_above_gas, c, 0, -1);
-    cutscene_event(cutscene_suffocation_fly_away, c, 50, -1);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    set_handheld_shake(HAND_CAM_SHAKE_HIGH);
-}
-
-BAD_RETURN(s32) cutscene_enter_pool_start(struct Camera *c) {
-    vec3f_copy(sCutsceneVars[3].point, sMarioCamState->pos);
-
-    if (gCurrLevelNum == LEVEL_CASTLE) { // entering HMC
-        vec3f_set(sCutsceneVars[3].point, 2485.f, -1589.f, -2659.f);
-    }
-    if (gCurrLevelNum == LEVEL_HMC) { // entering CotMC
-        vec3f_set(sCutsceneVars[3].point, 3350.f, -4589.f, 4800.f);
-    }
-
-    vec3f_copy(sCutsceneVars[0].point, c->focus);
-}
-
-BAD_RETURN(s32) cutscene_enter_pool_loop(struct Camera *c) {
-    UNUSED u32 pad[2];
-
-    cutscene_goto_cvar_pos(c, 1200.f, 0x2000, 0x200, 0);
-}
-
-BAD_RETURN(s32) cutscene_enter_pool(struct Camera *c) {
-    cutscene_event(cutscene_enter_pool_start, c, 0, 0);
-    cutscene_event(cutscene_enter_pool_loop, c, 0, -1);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-}
-
-/**
- * Store the camera focus in cvar1.
- * Store the area's center position (which happens to be the pyramid, in SSL) in cvar3.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_start(struct Camera *c) {
-    reset_pan_distance(c);
-    store_info_cannon(c);
-
-    vec3f_copy(sCutsceneVars[1].point, c->focus);
-    vec3f_set(sCutsceneVars[3].point, c->areaCenX, 1280.f, c->areaCenZ);
-}
-
-/**
- * Zoom in on the pyramid.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_zoom_in(UNUSED struct Camera *c) {
-    set_fov_function(CAM_FOV_APP_30);
-}
-
-/**
- * Look at the pyramid top.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_focus(struct Camera *c) {
-    approach_vec3f_asymptotic(c->focus, sCutsceneVars[3].point, 0.02f, 0.02f, 0.02f);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-}
-
-/**
- * Store the old pos and focus, then warp to the pyramid top.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_warp(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-
-    set_fov_function(CAM_FOV_DEFAULT);
-    sFOVState.fov = 45.f;
-
-    vec3f_copy(sCutsceneVars[4].point, c->pos);
-    vec3f_copy(sCutsceneVars[5].point, c->focus);
-    vec3f_copy(c->focus, sCutsceneVars[3].point);
-
-    vec3f_get_dist_and_angle(sCutsceneVars[3].point, sMarioCamState[0].pos, &dist, &pitch, &yaw);
-    vec3f_set_dist_and_angle(sCutsceneVars[3].point, c->pos, 2000.f, 0, yaw);
-    c->pos[1] += 500.f;
-}
-
-/**
- * Close up view of the spinning pyramid top as it rises.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_closeup(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-
-    vec3f_get_dist_and_angle(sCutsceneVars[3].point, c->pos, &dist, &pitch, &yaw);
-    approach_f32_asymptotic_bool(&dist, 2000.f, 0.1f);
-    vec3f_set_dist_and_angle(sCutsceneVars[3].point, c->pos, dist, pitch, yaw);
-
-    c->focus[1] += 4.f;
-    c->pos[1] -= 5.f;
-    sFOVState.fov = 45.f;
-    set_handheld_shake(HAND_CAM_SHAKE_CUTSCENE);
-}
-
-/**
- * Shake the camera during the closeup.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_cam_shake(UNUSED struct Camera *c) {
-    set_environmental_camera_shake(SHAKE_ENV_PYRAMID_EXPLODE);
-}
-
-/**
- * Warp back to the old position, and start a heavy camera shake.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_warp_back(struct Camera *c) {
-    UNUSED u32 pad[2];
-
-    vec3f_copy(c->pos, sCutsceneVars[4].point);
-    vec3f_copy(c->focus, sCutsceneVars[5].point);
-    set_environmental_camera_shake(SHAKE_ENV_BOWSER_JUMP);
-}
-
-/**
- * An unused cutscene for when the pyramid explodes.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode(struct Camera *c) {
-    cutscene_event(cutscene_pyramid_top_explode_start, c, 0, 0);
-    cutscene_event(cutscene_pyramid_top_explode_focus, c, 0, 30);
-    cutscene_event(cutscene_pyramid_top_explode_warp, c, 31, 31);
-    cutscene_event(cutscene_pyramid_top_explode_closeup, c, 31, 139);
-    cutscene_event(cutscene_pyramid_top_explode_zoom_in, c, 23, 23);
-    cutscene_event(cutscene_pyramid_top_explode_warp_back, c, 140, 140);
-    cutscene_event(cutscene_pyramid_top_explode_cam_shake, c, 31, 139);
-}
-
-/**
- * End the pyramid top explosion cutscene.
- */
-BAD_RETURN(s32) cutscene_pyramid_top_explode_end(struct Camera *c) {
-    cutscene_stop_dialog(c);
-    stop_cutscene_and_retrieve_stored_info(c);
-    // Move the camera back to Mario
-    transition_next_state(c, 30);
-}
-
-/**
- * Store the camera focus in cvar0, and store the top of the pyramid in cvar3.
- */
-BAD_RETURN(s32) cutscene_enter_pyramid_top_start(struct Camera *c) {
-    vec3f_copy(sCutsceneVars[0].point, c->focus);
-    vec3f_set(sCutsceneVars[3].point, c->areaCenX, 1280.f, c->areaCenZ);
-}
-
-/**
- * Cutscene that plays when Mario enters the top of the pyramid.
- */
-BAD_RETURN(s32) cutscene_enter_pyramid_top(struct Camera *c) {
-    cutscene_event(cutscene_enter_pyramid_top_start, c, 0, 0);
-    // Move to cvar3
-    cutscene_goto_cvar_pos(c, 200.f, 0x3000, 0, 0);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    set_handheld_shake(HAND_CAM_SHAKE_CUTSCENE);
-
-    if (sMarioCamState->pos[1] > 1250.f) {
-        // End the cutscene early if Mario ledge-grabbed.
-        // This only works because of the janky way that ledge-grabbing is implemented.
-        cutscene_exit_to_castle_grounds_end(c);
-    }
-}
-
-static void unused_cutscene_goto_cvar(struct Camera *c) {
-    f32 dist;
-
-    dist = calc_abs_dist(sCutsceneVars[3].point, sMarioCamState->pos);
-    dist = calc_abs_dist(sCutsceneVars[9].point, sMarioCamState->pos) + 200.f;
-    cutscene_goto_cvar_pos(c, dist, 0x1000, 0x300, 0);
-}
-
-/**
- * cvar8 is Mario's position and faceAngle
- *
- * cvar9.point is gCutsceneFocus's position
- * cvar9.angle[1] is the yaw between Mario and the gCutsceneFocus
- */
-BAD_RETURN(s32) cutscene_dialog_start(struct Camera *c) {
-    UNUSED f32 unused1;
-    UNUSED s16 unused2;
-    s16 yaw;
-
-
-    cutscene_soften_music(c);
-    set_time_stop_flags(TIME_STOP_ENABLED | TIME_STOP_DIALOG);
-
-#ifndef VERSION_JP
-    if (c->mode == CAMERA_MODE_BOSS_FIGHT) {
-        vec3f_copy(sCameraStoreCutscene.focus, c->focus);
-        vec3f_copy(sCameraStoreCutscene.pos, c->pos);
-    } else {
-#endif
-        store_info_star(c);
-#ifndef VERSION_JP
-    }
-#endif
-
-    // Store Mario's position and faceAngle
-    sCutsceneVars[8].angle[0] = 0;
-    vec3f_copy(sCutsceneVars[8].point, sMarioCamState->pos);
-    sCutsceneVars[8].point[1] += 125.f;
-
-    // Store gCutsceneFocus's position and yaw
-    object_pos_to_vec3f(sCutsceneVars[9].point, gCutsceneFocus);
-    sCutsceneVars[9].point[1] += gCutsceneFocus->hitboxHeight + 200.f;
-    sCutsceneVars[9].angle[1] = calculate_yaw(sCutsceneVars[8].point, sCutsceneVars[9].point);
-
-    yaw = calculate_yaw(sMarioCamState->pos, gLakituState.curPos);
-    if ((yaw - sCutsceneVars[9].angle[1]) & 0x8000) {
-        sCutsceneVars[9].angle[1] -= 0x6000;
-    } else {
-        sCutsceneVars[9].angle[1] += 0x6000;
-    }
-}
-
-/**
- * Move closer to Mario and the object, adjusting to their difference in height.
- * The camera's generally ends up looking over Mario's shoulder.
- */
-BAD_RETURN(s32) cutscene_dialog_move_mario_shoulder(struct Camera *c) {
-    f32 dist;
-    s16 pitch, yaw;
-    Vec3f focus, pos;
-
-    scale_along_line(focus, sCutsceneVars[9].point, sMarioCamState->pos, 0.7f);
-    vec3f_get_dist_and_angle(c->pos, focus, &dist, &pitch, &yaw);
-    pitch = calculate_pitch(c->pos, sCutsceneVars[9].point);
-    vec3f_set_dist_and_angle(c->pos, pos, dist, pitch, yaw);
-
-    focus[1] = focus[1] + (sCutsceneVars[9].point[1] - focus[1]) * 0.1f;
-    approach_vec3f_asymptotic(c->focus, focus, 0.2f, 0.2f, 0.2f);
-
-    vec3f_copy(pos, c->pos);
-
-    // Set y pos to cvar8's y (top of focus object)
-    pos[1] = sCutsceneVars[8].point[1];
-    vec3f_get_dist_and_angle(sCutsceneVars[8].point, pos, &dist, &pitch, &yaw);
-    approach_s16_asymptotic_bool(&yaw, sCutsceneVars[9].angle[1], 0x10);
-    approach_f32_asymptotic_bool(&dist, 180.f, 0.05f);
-    vec3f_set_dist_and_angle(sCutsceneVars[8].point, pos, dist, pitch, yaw);
-
-    // Move up if Mario is below the focus object, down is Mario is above
-    pos[1] = sCutsceneVars[8].point[1]
-              + sins(calculate_pitch(sCutsceneVars[9].point, sCutsceneVars[8].point)) * 100.f;
-
-    approach_f32_asymptotic_bool(&c->pos[1], pos[1], 0.05f);
-    c->pos[0] = pos[0];
-    c->pos[2] = pos[2];
-}
-
-/**
- * Create the dialog with sCutsceneDialogID
- */
-BAD_RETURN(s32) cutscene_dialog_create_dialog_box(struct Camera *c) {
-    if (c->cutscene == CUTSCENE_RACE_DIALOG) {
-        create_dialog_box_with_response(sCutsceneDialogID);
-    } else {
-        create_dialog_box(sCutsceneDialogID);
-    }
-
-    //! Unused. This may have been used before sCutsceneDialogResponse was implemented.
-    sCutsceneVars[8].angle[0] = 3;
-}
-
-/**
- * Cutscene that plays when Mario talks to an object.
- */
-BAD_RETURN(s32) cutscene_dialog(struct Camera *c) {
-    cutscene_event(cutscene_dialog_start, c, 0, 0);
-    cutscene_event(cutscene_dialog_move_mario_shoulder, c, 0, -1);
-    cutscene_event(cutscene_dialog_create_dialog_box, c, 10, 10);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-
-    if (gDialogResponse != 0) {
-        sCutsceneDialogResponse = gDialogResponse;
-    }
-
-    if ((get_dialog_id() == -1) && (sCutsceneVars[8].angle[0] != 0)) {
-        if (c->cutscene != CUTSCENE_RACE_DIALOG) {
-            sCutsceneDialogResponse = 3;
-        }
-
-        gCutsceneTimer = CUTSCENE_LOOP;
-        retrieve_info_star(c);
-        transition_next_state(c, 15);
-        sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-        cutscene_unsoften_music(c);
-    }
-}
-
-/**
- * Sets the CAM_FLAG_UNUSED_CUTSCENE_ACTIVE flag, which does nothing.
- */
-BAD_RETURN(s32) cutscene_dialog_set_flag(UNUSED struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-}
-
-/**
- * Ends the dialog cutscene.
- */
-BAD_RETURN(s32) cutscene_dialog_end(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-    c->cutscene = 0;
-    clear_time_stop_flags(TIME_STOP_ENABLED | TIME_STOP_DIALOG);
-}
-
-/**
- * Soften the music, clear cvar0
- *
- * In this cutscene, cvar0.angle[0] is used as a state variable.
- */
-BAD_RETURN(s32) cutscene_read_message_start(struct Camera *c) {
-    cutscene_soften_music(c);
-    transition_next_state(c, 30);
-    reset_pan_distance(c);
-    store_info_star(c);
-
-    sCutsceneVars[1].angle[0] = sCUpCameraPitch;
-    sCutsceneVars[1].angle[1] = sModeOffsetYaw;
-    sCUpCameraPitch = -0x830;
-    sModeOffsetYaw = 0;
-    sCutsceneVars[0].angle[0] = 0;
-}
-
-static void unused_cam_to_mario(struct Camera *c) {
-    Vec3s dir;
-
-    vec3s_set(dir, 0, sMarioCamState->faceAngle[1], 0);
-    offset_rotated_coords(c->pos, sMarioCamState->pos, dir, 0, 100.f, 190.f);
-    offset_rotated_coords(c->focus, sMarioCamState->pos, dir, 0, 70.f, -20.f);
-}
-
-/**
- * Cutscene that plays when Mario is reading a message (a sign or message on the wall)
- */
-BAD_RETURN(s32) cutscene_read_message(struct Camera *c) {
-    UNUSED u32 pad[2];
-
-    cutscene_event(cutscene_read_message_start, c, 0, 0);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-
-    switch (sCutsceneVars[0].angle[0]) {
-        // Do nothing until message is gone.
-        case 0:
-            if (get_dialog_id() != -1) {
-                sCutsceneVars[0].angle[0] += 1;
-                set_time_stop_flags(TIME_STOP_ENABLED | TIME_STOP_DIALOG);
-            }
-            break;
-        // Leave the dialog.
-        case 1:
-            move_mario_head_c_up(c);
-            update_c_up(c, c->focus, c->pos);
-
-            // This could cause softlocks. If a message starts one frame after another one closes, the
-            // cutscene will never end.
-            if (get_dialog_id() == -1) {
-                gCutsceneTimer = CUTSCENE_LOOP;
-                retrieve_info_star(c);
-                transition_next_state(c, 15);
-                sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-                clear_time_stop_flags(TIME_STOP_ENABLED | TIME_STOP_DIALOG);
-                // Retrieve previous state
-                sCUpCameraPitch = sCutsceneVars[1].angle[0];
-                sModeOffsetYaw = sCutsceneVars[1].angle[1];
-                cutscene_unsoften_music(c);
-            }
-    }
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-}
-
-/**
- * Set CAM_FLAG_UNUSED_CUTSCENE_ACTIVE, which does nothing.
- */
-BAD_RETURN(s32) cutscene_read_message_set_flag(UNUSED struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-}
-
-/**
- * End the message cutscene.
- */
-BAD_RETURN(s32) cutscene_read_message_end(struct Camera *c) {
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-    c->cutscene = 0;
-}
-
-/**
- * Set cvars:
- * cvar7 is Mario's pos and angle
- * cvar6 is the focus offset
- * cvar5 is the position offset
- */
-BAD_RETURN(s32) cutscene_exit_succ_start(UNUSED struct Camera *c) {
-    vec3f_copy(sCutsceneVars[7].point, sMarioCamState->pos);
-    vec3s_copy(sCutsceneVars[7].angle, sMarioCamState->faceAngle);
-    vec3f_set(sCutsceneVars[6].point, 6.f, 363.f, 543.f);
-    vec3f_set(sCutsceneVars[5].point, 137.f, 226.f, 995.f);
-}
-
-/**
- * Set the camera pos depending on which level Mario exited.
- */
-BAD_RETURN(s32) cutscene_non_painting_set_cam_pos(struct Camera *c) {
-    UNUSED u32 unused1;
-    struct Surface *floor;
-    UNUSED Vec3f unused2;
-
-    switch (gPrevLevel) {
-        case LEVEL_HMC:
-            vec3f_set(c->pos, 3465.f, -1008.f, -2961.f);
-            break;
-
-        case LEVEL_COTMC:
-            vec3f_set(c->pos, 3465.f, -1008.f, -2961.f);
-            break;
-
-        case LEVEL_RR:
-            vec3f_set(c->pos, -3741.f, 3151.f, 6065.f);
-            break;
-
-        case LEVEL_WMOTR:
-            vec3f_set(c->pos, 1972.f, 3230.f, 5891.f);
-            break;
-
-        default:
-            offset_rotated(c->pos, sCutsceneVars[7].point, sCutsceneVars[5].point, sCutsceneVars[7].angle);
-            c->pos[1] = find_floor(c->pos[0], c->pos[1] + 1000.f, c->pos[2], &floor) + 125.f;
-            break;
-    }
-}
-
-/**
- * Update the camera focus depending on which level Mario exited.
- */
-BAD_RETURN(s32) cutscene_non_painting_set_cam_focus(struct Camera *c) {
-    offset_rotated(c->focus, sCutsceneVars[7].point, sCutsceneVars[6].point, sCutsceneVars[7].angle);
-
-    if ((gPrevLevel == LEVEL_COTMC) || (gPrevLevel == LEVEL_HMC) || (gPrevLevel == LEVEL_RR)
-        || (gPrevLevel == LEVEL_WMOTR)) {
-        c->focus[0] = c->pos[0] + (sMarioCamState->pos[0] - c->pos[0]) * 0.7f;
-        c->focus[1] = c->pos[1] + (sMarioCamState->pos[1] - c->pos[1]) * 0.4f;
-        c->focus[2] = c->pos[2] + (sMarioCamState->pos[2] - c->pos[2]) * 0.7f;
-    } else {
-        c->focus[1] = c->pos[1] + (sMarioCamState->pos[1] - c->pos[1]) * 0.2f;
-    }
-}
-
-/**
- * Focus slightly left of Mario. Perhaps to keep the bowser painting in view?
- */
-BAD_RETURN(s32) cutscene_exit_bowser_succ_focus_left(UNUSED struct Camera *c) {
-    approach_f32_asymptotic_bool(&sCutsceneVars[6].point[0], -24.f, 0.05f);
-}
-
-/**
- * Instead of focusing on the key, just start a pitch shake. Clever!
- * The shake lasts 32 frames.
- */
-BAD_RETURN(s32) cutscene_exit_bowser_key_toss_shake(struct Camera *c) {
-    //! Unnecessary check.
-    if (c->cutscene == CUTSCENE_EXIT_BOWSER_SUCC) {
-        set_camera_pitch_shake(0x800, 0x40, 0x800);
-    }
-}
-
-/**
- * Start a camera shake when Mario lands on the ground.
- */
-BAD_RETURN(s32) cutscene_exit_succ_shake_landing(UNUSED struct Camera *c) {
-    set_environmental_camera_shake(SHAKE_ENV_EXPLOSION);
-}
-
-/**
- * Cutscene that plays when Mario beats bowser and exits the level.
- */
-BAD_RETURN(s32) cutscene_exit_bowser_succ(struct Camera *c) {
-    cutscene_event(cutscene_exit_succ_start, c, 0, 0);
-    cutscene_event(cutscene_non_painting_set_cam_pos, c, 0, -1);
-    cutscene_event(cutscene_exit_bowser_succ_focus_left, c, 18, -1);
-    cutscene_event(cutscene_non_painting_set_cam_focus, c, 0, -1);
-    cutscene_event(cutscene_exit_bowser_key_toss_shake, c, 125, 125);
-    cutscene_event(cutscene_exit_succ_shake_landing, c, 41, 41);
-}
-
-/**
- * End a non-painting exit cutscene. Used by BBH and bowser courses.
- */
-BAD_RETURN(s32) cutscene_non_painting_end(struct Camera *c) {
-    c->cutscene = 0;
-
-    if (c->defMode == CAMERA_MODE_CLOSE) {
-        c->mode = CAMERA_MODE_CLOSE;
-    } else {
-        c->mode = CAMERA_MODE_FREE_ROAM;
-    }
-
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    transition_next_state(c, 60);
-    update_camera_yaw(c);
-}
-
-/**
- * Override the position offset.
- */
-BAD_RETURN(s32) cutscene_exit_non_painting_succ_override_cvar(UNUSED struct Camera *c) {
-    vec3f_set(sCutsceneVars[5].point, 137.f, 246.f, 1115.f);
-}
-
-/**
- * Cutscene that plays when Mario collects a star and leaves a non-painting course, like HMC or BBH.
- */
-BAD_RETURN(s32) cutscene_exit_non_painting_succ(struct Camera *c) {
-    cutscene_event(cutscene_exit_succ_start, c, 0, 0);
-    cutscene_event(cutscene_exit_non_painting_succ_override_cvar, c, 0, 0);
-    cutscene_event(cutscene_non_painting_set_cam_pos, c, 0, -1);
-    cutscene_event(cutscene_exit_bowser_succ_focus_left, c, 18, -1);
-    cutscene_event(cutscene_non_painting_set_cam_focus, c, 0, -1);
-    cutscene_event(cutscene_exit_succ_shake_landing, c, 41, 41);
-    update_camera_yaw(c);
-}
-
-/**
- * Set cvar7 to Mario's pos and faceAngle
- * Set cvar6 to the focus offset from Mario.
- * set cvar5 to the pos offset from Mario. (This is always overwritten)
- */
-BAD_RETURN(s32) cutscene_non_painting_death_start(UNUSED struct Camera *c) {
-    vec3f_copy(sCutsceneVars[7].point, sMarioCamState->pos);
-    vec3s_copy(sCutsceneVars[7].angle, sMarioCamState->faceAngle);
-    vec3f_set(sCutsceneVars[6].point, -42.f, 350.f, 727.f);
-    // This is always overwritten, except in the unused cutscene_exit_bowser_death()
-    vec3f_set(sCutsceneVars[5].point, 107.f, 226.f, 1187.f);
-}
-
-/**
- * This cutscene is the same as non_painting_death, but the camera is closer to Mario and lower.
- * Because it it doesn't call cutscene_non_painting_death_override_offset, the value from
- * cutscene_non_painting_death_start is used.
- *
- * This cutscene is unused, dying in bowser's arena spawns Mario near the warp pipe, not back in the
- * hub.
- */
-BAD_RETURN(s32) cutscene_exit_bowser_death(struct Camera *c) {
-    cutscene_event(cutscene_non_painting_death_start, c, 0, 0);
-    cutscene_event(cutscene_non_painting_set_cam_pos, c, 0, -1);
-    cutscene_event(cutscene_non_painting_set_cam_focus, c, 0, -1);
-}
-
-/**
- * Set the offset from Mario depending on the course Mario exited.
- * This overrides cutscene_non_painting_death_start()
- */
-BAD_RETURN(s32) cutscene_non_painting_death_override_offset(UNUSED struct Camera *c) {
-    switch (gPrevLevel) {
-        case LEVEL_HMC:
-            vec3f_set(sCutsceneVars[5].point, 187.f, 369.f, -197.f);
-            break;
-        case LEVEL_COTMC:
-            vec3f_set(sCutsceneVars[5].point, 187.f, 369.f, -197.f);
-            break;
-        default:
-            vec3f_set(sCutsceneVars[5].point, 107.f, 246.f, 1307.f);
-            break;
-    }
-}
-
-/**
- * Cutscene played when Mario dies in a non-painting course, like HMC or BBH.
- */
-BAD_RETURN(s32) cutscene_non_painting_death(struct Camera *c) {
-    cutscene_event(cutscene_non_painting_death_start, c, 0, 0);
-    cutscene_event(cutscene_non_painting_death_override_offset, c, 0, 0);
-    cutscene_event(cutscene_non_painting_set_cam_pos, c, 0, -1);
-    cutscene_event(cutscene_non_painting_set_cam_focus, c, 0, -1);
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-}
-
-/**
- * Set cvars:
- * cvar3 is an offset applied to the camera's rotation around Mario. It starts at 0x1200
- * cvar 1 is more complicated:
- *      First the yaw from Mario to the camera is calculated. cvar1 is the high byte of the difference
- *      between that yaw and Mario's faceAngle plus 0x1200. The reason for taking the high byte is
- *      because cvar1 rotates until is reaches 0, so it's important that it's a multiple of 0x100.
- */
-BAD_RETURN(s32) cutscene_cap_switch_press_start(struct Camera *c) {
-    UNUSED s16 unused1;
-    s16 yaw;
-    UNUSED u32 pad[2];
-
-    store_info_star(c);
-    yaw = calculate_yaw(sMarioCamState->pos, c->pos);
-    sCutsceneVars[3].angle[1] = 0x1200;
-    // Basically the amount of rotation to get from behind Mario to in front of Mario
-    sCutsceneVars[1].angle[1] = (yaw - (sMarioCamState->faceAngle[1] + sCutsceneVars[3].angle[1])) & 0xFF00;
-}
-
-/**
- * Rotate around Mario. As each cvar stops updating, the rotation slows until the camera ends up in
- * front of Mario.
- */
-BAD_RETURN(s32) cutscene_cap_switch_press_rotate_around_mario(struct Camera *c) {
-    f32 dist;
-    s16 pitch, yaw;
-    UNUSED s16 unusedYaw = sMarioCamState->faceAngle[1] + 0x1000;
-    UNUSED s16 unused;
-    UNUSED s32 cvar1Yaw = sCutsceneVars[1].angle[1];
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-
-    // cvar3 wraps around until it reaches 0x1000
-    if (sCutsceneVars[3].angle[1] != 0x1000) {
-        sCutsceneVars[3].angle[1] += 0x100;
-    }
-
-    // cvar1 wraps until 0
-    if (sCutsceneVars[1].angle[1] != 0) {
-        sCutsceneVars[1].angle[1] += 0x100;
-    }
-
-    yaw = sMarioCamState->faceAngle[1] + sCutsceneVars[3].angle[1] + sCutsceneVars[1].angle[1];
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-/**
- * Move the camera slightly downwards.
- */
-BAD_RETURN(s32) cutscene_cap_switch_press_lower_cam(struct Camera *c) {
-    rotate_and_move_vec3f(c->pos, sMarioCamState->pos, 0, -0x20, 0);
-}
-
-/**
- * Move the camera closer to Mario.
- */
-BAD_RETURN(s32) cutscene_cap_switch_press_approach_mario(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-    approach_f32_asymptotic_bool(&dist, 195.f, 0.2f);
-    approach_s16_asymptotic_bool(&pitch, 0, 0x10);
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-
-    approach_f32_asymptotic_bool(&c->focus[0], sMarioCamState->pos[0], 0.1f);
-    approach_f32_asymptotic_bool(&c->focus[1], sMarioCamState->pos[1] + 110.f, 0.1f);
-    approach_f32_asymptotic_bool(&c->focus[2], sMarioCamState->pos[2], 0.1f);
-}
-
-/**
- * Pan the camera left so that Mario is on the right side of the screen when the camera stops spinning.
- */
-BAD_RETURN(s32) cutscene_cap_switch_press_pan_left(struct Camera *c) {
-    vec3f_copy(c->focus, sMarioCamState->pos);
-    c->focus[1] += 110.f;
-    camera_approach_s16_symmetric_bool(&sCutsceneVars[0].angle[1], 0x800, 0x20);
-    pan_camera(c, sCutsceneVars[0].angle[0], sCutsceneVars[0].angle[1]);
-}
-
-/**
- * Create a dialog box with the cap switch's text.
- */
-BAD_RETURN(s32) cutscene_cap_switch_press_create_dialog(UNUSED struct Camera *c) {
-    create_dialog_box_with_response(gCutsceneFocus->oBehParams2ndByte + DIALOG_010);
-}
-
-static UNUSED BAD_RETURN(s32) unused_cap_switch_retrieve_info(struct Camera *c) {
-    retrieve_info_star(c);
-    transition_next_state(c, 30);
-}
-
-/**
- * Cutscene that plays when Mario presses a cap switch.
- */
-BAD_RETURN(s32) cutscene_cap_switch_press(struct Camera *c) {
-    f32 dist;
-    s16 pitch, yaw;
-
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-
-    cutscene_event(cutscene_cap_switch_press_start, c, 0, 0);
-    cutscene_event(cutscene_cap_switch_press_approach_mario, c, 0, 30);
-    cutscene_event(cutscene_cap_switch_press_pan_left, c, 0, -1);
-    cutscene_event(cutscene_cap_switch_press_rotate_around_mario, c, 30, -1);
-    cutscene_event(cutscene_cap_switch_press_lower_cam, c, 10, 70);
-    cutscene_event(cutscene_cap_switch_press_create_dialog, c, 10, 10);
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-
-    if (gDialogResponse != 0) {
-        sCutsceneVars[4].angle[0] = gDialogResponse;
-    }
-
-    if ((get_dialog_id() == -1) && (sCutsceneVars[4].angle[0] != 0)) {
-        sCutsceneDialogResponse = sCutsceneVars[4].angle[0];
-        if (sCutsceneVars[4].angle[0] == 1) {
-            cap_switch_save(gCutsceneFocus->oBehParams2ndByte);
-        }
-        stop_cutscene_and_retrieve_stored_info(c);
-        transition_next_state(c, 30);
-    }
-}
-
-/**
- * Sets cvars:
- * cvar0 is the camera's position
- * cvar1 is the camera's focus
- * cvar2 is the goal position
- * cvar3 is the goal focus
- */
-BAD_RETURN(s32) cutscene_unlock_key_door_start(struct Camera *c) {
-    Vec3f posOff, focusOff;
-
-    vec3f_copy(sCutsceneVars[0].point, c->pos);
-    vec3f_copy(sCutsceneVars[1].point, c->focus);
-    vec3f_set(posOff, -206.f, 108.f, 234.f);
-    vec3f_set(focusOff, 48.f, 104.f, -193.f);
-    offset_rotated(sCutsceneVars[2].point, sMarioCamState->pos, posOff, sMarioCamState->faceAngle);
-    offset_rotated(sCutsceneVars[3].point, sMarioCamState->pos, focusOff, sMarioCamState->faceAngle);
-}
-
-/**
- * Move the camera to the cvars position and focus, closer to Mario.
- * Gives a better view of the key.
- */
-BAD_RETURN(s32) cutscene_unlock_key_door_approach_mario(struct Camera *c) {
-    approach_vec3f_asymptotic(c->pos, sCutsceneVars[2].point, 0.1f, 0.1f, 0.1f);
-    approach_vec3f_asymptotic(c->focus, sCutsceneVars[3].point, 0.1f, 0.1f, 0.1f);
-}
-
-/**
- * Move the camera focus up a bit, focusing on the key in the lock.
- */
-BAD_RETURN(s32) cutscene_unlock_key_door_focus_lock(UNUSED struct Camera *c) {
-    approach_f32_asymptotic_bool(&sCutsceneVars[3].point[1], sMarioCamState->pos[1] + 140.f, 0.07f);
-}
-
-BAD_RETURN(s32) cutscene_unlock_key_door_stub(UNUSED struct Camera *c) {
-}
-
-/**
- * Move back to the previous pos and focus, stored in cvar0 and cvar1.
- */
-BAD_RETURN(s32) cutscene_unlock_key_door_fly_back(struct Camera *c) {
-    approach_vec3f_asymptotic(c->pos, sCutsceneVars[0].point, 0.1f, 0.1f, 0.1f);
-    approach_vec3f_asymptotic(c->focus, sCutsceneVars[1].point, 0.1f, 0.1f, 0.1f);
-}
-
-/**
- * Shake the camera's fov when the key is put in the lock.
- */
-BAD_RETURN(s32) cutscene_unlock_key_door_fov_shake(UNUSED struct Camera *c) {
-    cutscene_set_fov_shake_preset(1);
-}
-
-/**
- * Cutscene that plays when Mario unlocks a key door.
- */
-BAD_RETURN(s32) cutscene_unlock_key_door(UNUSED struct Camera *c) {
-    cutscene_event(cutscene_unlock_key_door_start, c, 0, 0);
-    cutscene_event(cutscene_unlock_key_door_approach_mario, c, 0, 123);
-    cutscene_event(cutscene_unlock_key_door_fly_back, c, 124, -1);
-    cutscene_event(cutscene_unlock_key_door_fov_shake, c, 79, 79);
-    cutscene_event(cutscene_unlock_key_door_focus_lock, c, 70, 110);
-    cutscene_event(cutscene_unlock_key_door_stub, c, 112, 112);
-}
-
-/**
- * Move the camera along `positionSpline` and point its focus at the corresponding point along
- * `focusSpline`. sCutsceneSplineSegmentProgress is updated after pos and focus are calculated.
- */
-s32 intro_peach_move_camera_start_to_pipe(struct Camera *c, struct CutsceneSplinePoint positionSpline[],
-                  struct CutsceneSplinePoint focusSpline[]) {
-    Vec3f offset;
-    s32 posReturn = 0;
-    s32 focusReturn = 0;
-
-    /**
-     * The position spline's speed parameters are all 0, so sCutsceneSplineSegmentProgress doesn't get
-     * updated. Otherwise position would move two frames ahead, and c->focus would always be one frame
-     * further along the spline than c->pos.
-     */
-    posReturn = move_point_along_spline(c->pos, positionSpline, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    focusReturn = move_point_along_spline(c->focus, focusSpline, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-
-    // The two splines used by this function are reflected in the horizontal plane for some reason,
-    // so they are rotated every frame. Why do this, Nintendo?
-    rotate_in_xz(c->focus, c->focus, DEGREES(180));
-    rotate_in_xz(c->pos, c->pos, DEGREES(180));
-
-    vec3f_set(offset, -1328.f, 260.f, 4664.f);
-    vec3f_add(c->focus, offset);
-    vec3f_add(c->pos, offset);
-
-    posReturn += focusReturn; // Unused
-    return focusReturn;
-}
-
-/**
- * Create a dialog box with the letter text
- */
-BAD_RETURN(s32) peach_letter_text(UNUSED struct Camera *c) {
-    create_dialog_box(DIALOG_020);
-}
-
-#ifndef VERSION_JP
-BAD_RETURN(s32) play_sound_peach_reading_letter(UNUSED struct Camera *c) {
-    play_sound(SOUND_DOOR_OPENING, gGlobalSoundSource);
-}
-#endif
-
-/**
- * Move the camera from peach reading the letter all the way to Mario's warp pipe. Follow the
- * sIntroStartToPipe splines.
- */
-BAD_RETURN(s32) cutscene_intro_peach_start_to_pipe_spline(struct Camera *c) {
-    if (intro_peach_move_camera_start_to_pipe(c, sIntroStartToPipePosition, sIntroStartToPipeFocus) != 0) {
-        gCameraMovementFlags &= ~CAM_MOVE_C_UP_MODE;
-        gCutsceneTimer = CUTSCENE_LOOP;
-    }
-}
-
-/**
- * Loop the cutscene until Mario exits the dialog.
- */
-BAD_RETURN(s32) cutscene_intro_peach_dialog(struct Camera *c) {
-    if (get_dialog_id() == -1) {
-        vec3f_copy(gLakituState.goalPos, c->pos);
-        vec3f_copy(gLakituState.goalFocus, c->focus);
-        sStatusFlags |= (CAM_FLAG_SMOOTH_MOVEMENT | CAM_FLAG_UNUSED_CUTSCENE_ACTIVE);
-        gCutsceneTimer = CUTSCENE_STOP;
-        c->cutscene = 0;
-    }
-}
-
-BAD_RETURN(s32) cutscene_intro_peach_follow_pipe_spline(struct Camera *c) {
-    move_point_along_spline(c->pos, sIntroPipeToDialogPosition, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    move_point_along_spline(c->focus, sIntroPipeToDialogFocus, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-}
-
-BAD_RETURN(s32) cutscene_intro_peach_clear_cutscene_status(UNUSED struct Camera *c) {
-    sMarioCamState->cameraEvent = 0;
-}
-
-/**
- * Set fov to 8 degrees, then zoom out to 30.
- */
-BAD_RETURN(s32) cutscene_intro_peach_zoom_fov(UNUSED struct Camera *c) {
-    sFOVState.fov = 8.f;
-    set_fov_function(CAM_FOV_ZOOM_30);
-}
-
-/**
- * Reset the spline progress, turn on handheld shake.
- */
-BAD_RETURN(s32) cutscene_intro_peach_reset_spline(UNUSED struct Camera *c) {
-    sCutsceneSplineSegment = 0;
-    sCutsceneSplineSegmentProgress = 0.1f;
-    //! @bug since this event is only called for one frame, this handheld shake is turned off on the
-    //! next frame.
-    set_handheld_shake(HAND_CAM_SHAKE_HIGH);
-}
-
-/**
- * Turn off handheld shake. This was likely written before handheld shake was changed to turn off every
- * frame, as it's the only instance of HAND_CAM_SHAKE_OFF.
- */
-BAD_RETURN(s32) cutscene_intro_peach_handheld_shake_off(UNUSED struct Camera *c) {
-    set_handheld_shake(HAND_CAM_SHAKE_OFF);
-}
-
-BAD_RETURN(s32) intro_pipe_exit_text(UNUSED struct Camera *c) {
-    create_dialog_box(DIALOG_033);
-}
-
-#ifndef VERSION_JP
-BAD_RETURN(s32) play_sound_intro_turn_on_hud(UNUSED struct Camera *c) {
-    play_sound_rbutton_changed();
-}
-#endif
-
-/**
- * Fly to the pipe. Near the end, the camera jumps to Lakitu's position and the hud turns on.
- */
-BAD_RETURN(s32) cutscene_intro_peach_fly_to_pipe(struct Camera *c) {
-#if defined(VERSION_US) || defined(VERSION_SH)
-    cutscene_event(play_sound_intro_turn_on_hud, c, 818, 818);
-#elif defined(VERSION_EU)
-    cutscene_event(play_sound_intro_turn_on_hud, c, 673, 673);
-#endif
-    cutscene_spawn_obj(6, 1);
-    cutscene_event(cutscene_intro_peach_start_flying_music, c, 0, 0);
-    cutscene_event(cutscene_intro_peach_start_to_pipe_spline, c, 0, -1);
-#ifdef VERSION_EU
-    cutscene_event(cutscene_intro_peach_clear_cutscene_status, c, 572, 572);
-#else
-    cutscene_event(cutscene_intro_peach_clear_cutscene_status, c, 717, 717);
-#endif
-    clamp_pitch(c->pos, c->focus, 0x3B00, -0x3B00);
-    sCutsceneVars[1].point[1] = 400.f;
-}
-
-/**
- * Lakitu flies around the warp pipe, then Mario jumps out.
- */
-BAD_RETURN(s32) cutscene_intro_peach_mario_appears(struct Camera *c) {
-    UNUSED u32 pad[2];
-
-    sMarioCamState->cameraEvent = 0;
-    cutscene_event(cutscene_intro_peach_reset_spline, c, 0, 0);
-    cutscene_event(cutscene_intro_peach_follow_pipe_spline, c, 0, -1);
-    cutscene_event(cutscene_intro_peach_handheld_shake_off, c, 70, 70);
-    cutscene_event(intro_pipe_exit_text, c, 250, 250);
-
-    approach_f32_asymptotic_bool(&sCutsceneVars[1].point[1], 80.f + sMarioGeometry.currFloorHeight +
-                                 (sMarioCamState->pos[1] - sMarioGeometry.currFloorHeight) * 1.1f, 0.4f);
-
-    // Make the camera look up as Mario jumps out of the pipe
-    if (c->focus[1] < sCutsceneVars[1].point[1]) {
-        c->focus[1] = sCutsceneVars[1].point[1];
-    }
-
-    sStatusFlags |= CAM_FLAG_UNUSED_CUTSCENE_ACTIVE;
-}
-
-/**
- * Reset the fov. This gives the effect of peach zooming out as she fades.
- */
-BAD_RETURN(s32) cutscene_intro_peach_reset_fov(UNUSED struct Camera *c) {
-    set_fov_function(CAM_FOV_DEFAULT);
-}
-
-/**
- * Peach reads the letter to Mario.
- */
-BAD_RETURN(s32) cutscene_intro_peach_letter(struct Camera *c) {
-    cutscene_spawn_obj(5, 0);
-    cutscene_event(cutscene_intro_peach_zoom_fov, c, 0, 0);
-    cutscene_event(cutscene_intro_peach_start_letter_music, c, 65, 65);
-#ifdef VERSION_EU
-    cutscene_event(cutscene_intro_peach_eu_lower_volume, c, 68, 68);
-#endif
-    cutscene_event(cutscene_intro_peach_start_to_pipe_spline, c, 0, 0);
-    cutscene_event(peach_letter_text, c, 65, 65);
-#ifndef VERSION_JP
-    cutscene_event(play_sound_peach_reading_letter, c, 83, 83);
-#endif
-
-    if ((gCutsceneTimer > 120) && (get_dialog_id() == -1)) {
-        // Start the next scene
-        gCutsceneTimer = CUTSCENE_LOOP;
-    }
-
-    clamp_pitch(c->pos, c->focus, 0x3B00, -0x3B00);
-}
-
-/**
- * Reset the spline progress.
- */
-BAD_RETURN(s32) cutscene_end_waving_start(UNUSED struct Camera *c) {
-    cutscene_reset_spline();
-}
-
-// 3rd part of data
-struct CutsceneSplinePoint gIntroLakituStartToPipeFocus[] = {
-    { 0, 32, { 58, -250, 346 } },    { 1, 50, { -159, -382, 224 } }, { 2, 37, { 0, -277, 237 } },
-    { 3, 15, { 1, -44, 245 } },      { 4, 35, { 0, -89, 228 } },     { 5, 15, { 28, 3, 259 } },
-    { 6, 25, { -38, -201, 371 } },   { 7, 20, { -642, 118, 652 } },  { 8, 25, { 103, -90, 861 } },
-    { 9, 25, { 294, 145, 579 } },    { 10, 30, { 220, -42, 500 } },  { 11, 20, { 10, -134, 200 } },
-    { 12, 20, { -143, -145, 351 } }, { 13, 14, { -256, -65, 528 } }, { 14, 20, { -251, -52, 459 } },
-    { 15, 25, { -382, 520, 395 } },  { 16, 25, { -341, 240, 653 } }, { 17, 5, { -262, 700, 143 } },
-    { 18, 15, { -760, 32, 27 } },    { 19, 20, { -756, -6, -26 } },  { 20, 20, { -613, 5, 424 } },
-    { 21, 20, { -22, -100, 312 } },  { 22, 25, { 212, 80, 61 } },    { 23, 20, { 230, -28, 230 } },
-    { 24, 35, { -83, -51, 303 } },   { 25, 17, { 126, 90, 640 } },   { 26, 9, { 158, 95, 763 } },
-    { 27, 8, { 113, -25, 1033 } },   { 28, 20, { 57, -53, 1291 } },  { 29, 15, { 73, -34, 1350 } },
-    { 30, 7, { 0, 96, 1400 } },      { 31, 8, { -59, 269, 1450 } },  { 32, 15, { 57, 1705, 1500 } },
-    { 0, 15, { -227, 511, 1550 } },  { -1, 15, { -227, 511, 1600 } }
-};
-
-struct CutsceneSplinePoint gIntroLakituStartToPipeOffsetFromCamera[] = {
-    { 0, 0, { -46, 87, -15 } },   { 1, 0, { -38, 91, -11 } },  { 2, 0, { -31, 93, -13 } },
-    { 3, 0, { -50, 84, -16 } },   { 4, 0, { -52, 83, -17 } },  { 5, 0, { -10, 99, 3 } },
-    { 6, 0, { -54, 83, -10 } },   { 7, 0, { -31, 85, -40 } },  { 8, 0, { -34, 91, 19 } },
-    { 9, 0, { -9, 95, 28 } },     { 10, 0, { 17, 72, 66 } },   { 11, 0, { 88, -7, 45 } },
-    { 12, 0, { 96, -6, -26 } },   { 13, 0, { 56, -1, -82 } },  { 14, 0, { 40, 65, -63 } },
-    { 15, 0, { -26, -3, -96 } },  { 16, 0, { 92, 82, 19 } },   { 17, 0, { 92, 32, 19 } },
-    { 18, 0, { 92, 32, 19 } },    { 19, 0, { 92, 102, 19 } },  { 20, 0, { -69, 59, -70 } },
-    { 21, 0, { -77, 109, -61 } }, { 22, 0, { -87, 59, -46 } }, { 23, 0, { -99, -3, 11 } },
-    { 24, 0, { -99, -11, 5 } },   { 25, 0, { -97, -6, 19 } },  { 26, 0, { -97, 22, -7 } },
-    { 27, 0, { -98, -11, -13 } }, { 28, 0, { -97, -11, 19 } }, { 29, 0, { -91, -11, 38 } },
-    { 30, 0, { -76, -11, 63 } },  { 31, 0, { -13, 33, 93 } },  { 32, 0, { 51, -11, 84 } },
-    { 33, 0, { 51, -11, 84 } },   { -1, 0, { 51, -11, 84 } }
-};
-
-struct CutsceneSplinePoint gEndWavingPos[] = {
-    { 0, 0, { -5, 975, -917 } },    { 0, 0, { -5, 975, -917 } },    { 0, 0, { -5, 975, -917 } },
-    { 0, 0, { -76, 1067, 742 } },   { 0, 0, { -105, 1576, 3240 } }, { 0, 0, { -177, 1709, 5586 } },
-    { 0, 0, { -177, 1709, 5586 } }, { 0, 0, { -177, 1709, 5586 } }, { 0, 0, { -177, 1709, 5586 } }
-};
-
-struct CutsceneSplinePoint gEndWavingFocus[] = {
-    { 0, 50, { 18, 1013, -1415 } }, { 0, 100, { 17, 1037, -1412 } }, { 0, 100, { 16, 1061, -1408 } },
-    { 0, 100, { -54, 1053, 243 } }, { 0, 100, { -84, 1575, 2740 } }, { 0, 50, { -156, 1718, 5086 } },
-    { 0, 0, { -156, 1718, 5086 } }, { 0, 0, { -156, 1718, 5086 } },  { 0, 0, { -156, 1718, 5086 } }
-};
-
-BAD_RETURN(s32) cutscene_end_waving(struct Camera *c) {
-    cutscene_event(cutscene_end_waving_start, c, 0, 0);
-    move_point_along_spline(c->pos, gEndWavingPos, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    move_point_along_spline(c->focus, gEndWavingFocus, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    cutscene_spawn_obj(6, 120);
-}
-
-/**
- * Called on the first frame of the credits. Resets the spline progress.
- */
-BAD_RETURN(s32) cutscene_credits_reset_spline(UNUSED struct Camera *c) {
-    cutscene_reset_spline();
-}
-
-extern struct CutsceneSplinePoint sBobCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sBobCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sWfCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sWfCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sJrbCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sJrbCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sCcmSlideCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sCcmSlideCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sBbhCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sBbhCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sHmcCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sHmcCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sThiWigglerCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sThiWigglerCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sVolcanoCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sVolcanoCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sSslCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sSslCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sDddCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sDddCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sSlCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sSlCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sWdwCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sWdwCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sTtmCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sTtmCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sThiHugeCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sThiHugeCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sTtcCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sTtcCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sRrCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sRrCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sSaCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sSaCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sCotmcCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sCotmcCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sDddSubCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sDddSubCreditsSplineFocus[];
-extern struct CutsceneSplinePoint sCcmOutsideCreditsSplinePositions[];
-extern struct CutsceneSplinePoint sCcmOutsideCreditsSplineFocus[];
-
-/**
- * Follow splines through the courses of the game.
- */
-BAD_RETURN(s32) cutscene_credits(struct Camera *c) {
-    struct CutsceneSplinePoint *focus, *pos;
-
-    cutscene_event(cutscene_credits_reset_spline, c, 0, 0);
-
-    switch (gCurrLevelArea) {
-        case AREA_BOB:
-            pos = sBobCreditsSplinePositions;
-            focus = sBobCreditsSplineFocus;
-            break;
-        case AREA_WF:
-            pos = sWfCreditsSplinePositions;
-            focus = sWfCreditsSplineFocus;
-            break;
-        case AREA_JRB_MAIN:
-            pos = sJrbCreditsSplinePositions;
-            focus = sJrbCreditsSplineFocus;
-            break;
-        case AREA_CCM_SLIDE:
-            pos = sCcmSlideCreditsSplinePositions;
-            focus = sCcmSlideCreditsSplineFocus;
-            break;
-        case AREA_BBH:
-            pos = sBbhCreditsSplinePositions;
-            focus = sBbhCreditsSplineFocus;
-            break;
-        case AREA_HMC:
-            pos = sHmcCreditsSplinePositions;
-            focus = sHmcCreditsSplineFocus;
-            break;
-        case AREA_THI_WIGGLER:
-            pos = sThiWigglerCreditsSplinePositions;
-            focus = sThiWigglerCreditsSplineFocus;
-            break;
-        case AREA_LLL_VOLCANO:
-            pos = sVolcanoCreditsSplinePositions;
-            focus = sVolcanoCreditsSplineFocus;
-            break;
-        case AREA_SSL_OUTSIDE:
-            pos = sSslCreditsSplinePositions;
-            focus = sSslCreditsSplineFocus;
-            break;
-        case AREA_DDD_WHIRLPOOL:
-            pos = sDddCreditsSplinePositions;
-            focus = sDddCreditsSplineFocus;
-            break;
-        case AREA_SL_OUTSIDE:
-            pos = sSlCreditsSplinePositions;
-            focus = sSlCreditsSplineFocus;
-            break;
-        case AREA_WDW_MAIN:
-            pos = sWdwCreditsSplinePositions;
-            focus = sWdwCreditsSplineFocus;
-            break;
-        case AREA_TTM_OUTSIDE:
-            pos = sTtmCreditsSplinePositions;
-            focus = sTtmCreditsSplineFocus;
-            break;
-        case AREA_THI_HUGE:
-            pos = sThiHugeCreditsSplinePositions;
-            focus = sThiHugeCreditsSplineFocus;
-            break;
-        case AREA_TTC:
-            pos = sTtcCreditsSplinePositions;
-            focus = sTtcCreditsSplineFocus;
-            break;
-        case AREA_RR:
-            pos = sRrCreditsSplinePositions;
-            focus = sRrCreditsSplineFocus;
-            break;
-        case AREA_SA:
-            pos = sSaCreditsSplinePositions;
-            focus = sSaCreditsSplineFocus;
-            break;
-        case AREA_COTMC:
-            pos = sCotmcCreditsSplinePositions;
-            focus = sCotmcCreditsSplineFocus;
-            break;
-        case AREA_DDD_SUB:
-            pos = sDddSubCreditsSplinePositions;
-            focus = sDddSubCreditsSplineFocus;
-            break;
-        case AREA_CCM_OUTSIDE:
-            //! Checks if the "Snowman's Lost His Head" star was collected. The credits likely would
-            //! have avoided the snowman if the player didn't collect that star, but in the end the
-            //! developers decided against it.
-            if (save_file_get_star_flags(gCurrSaveFileNum - 1, gCurrCourseNum - 1) & 0x10) {
-                pos = sCcmOutsideCreditsSplinePositions;
-                focus = sCcmOutsideCreditsSplineFocus;
-            } else {
-                pos = sCcmOutsideCreditsSplinePositions;
-                focus = sCcmOutsideCreditsSplineFocus;
-            }
-            break;
-        default:
-            pos = sCcmOutsideCreditsSplinePositions;
-            focus = sCcmOutsideCreditsSplineFocus;
-    }
-
-    copy_spline_segment(sCurCreditsSplinePos, pos);
-    copy_spline_segment(sCurCreditsSplineFocus, focus);
-    move_point_along_spline(c->pos, sCurCreditsSplinePos, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    move_point_along_spline(c->focus, sCurCreditsSplineFocus, &sCutsceneSplineSegment, &sCutsceneSplineSegmentProgress);
-    player2_rotate_cam(c, -0x2000, 0x2000, -0x4000, 0x4000);
-}
-
-/**
- * Set the camera pos relative to Mario.
- */
-BAD_RETURN(s32) cutscene_sliding_doors_open_start(struct Camera *c) {
-    f32 dist;
-    s16 pitch, yaw;
-
-    vec3f_get_dist_and_angle(sMarioCamState->pos, c->pos, &dist, &pitch, &yaw);
-
-    // If the camera is too close, warp it backwards set it to a better angle.
-    if (dist < 500.f) {
-        dist = 500.f;
-        yaw = sMarioCamState->faceAngle[1] + 0x8800;
-        pitch = 0x800;
-    }
-
-    vec3f_set_dist_and_angle(sMarioCamState->pos, c->pos, dist, pitch, yaw);
-}
-
-/**
- * cvar1: Mario's position
- * cvar0.angle: Mario's angle
- * cvar0.point: offset from Mario
- */
-BAD_RETURN(s32) cutscene_sliding_doors_open_set_cvars(UNUSED struct Camera *c) {
-    vec3f_copy(sCutsceneVars[1].point, sMarioCamState->pos);
-    vec3s_copy(sCutsceneVars[0].angle, sMarioCamState->faceAngle);
-    vec3f_set(sCutsceneVars[0].point, 80.f, 325.f, 200.f);
-}
-
-/**
- * Decrease the cvar0 y offset to 75, which would simulate Lakitu flying under the doorway.
- * However, the initial y offset is too high for Lakitu to reach 75 in time.
- */
-BAD_RETURN(s32) cutscene_sliding_doors_go_under_doorway(UNUSED struct Camera *c) {
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[0].point[1], 75.f, 10.f);
-}
-
-/**
- * Approach a y offset of 125 again.
- */
-BAD_RETURN(s32) cutscene_sliding_doors_fly_back_up(UNUSED struct Camera *c) {
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[0].point[1], 125.f, 10.f);
-}
-
-/**
- * Follow Mario through the door, by approaching cvar1.point.
- */
-BAD_RETURN(s32) cutscene_sliding_doors_follow_mario(struct Camera *c) {
-    Vec3f pos;
-    UNUSED u32 pad[5];
-
-    vec3f_copy(pos, c->pos);
-    // Update cvar1 with Mario's position (the y value doesn't change)
-    sCutsceneVars[1].point[0] = sMarioCamState->pos[0];
-    sCutsceneVars[1].point[2] = sMarioCamState->pos[2];
-
-    // Decrease cvar0's offsets, moving the camera behind Mario at his eye height.
-    approach_f32_asymptotic_bool(&sCutsceneVars[0].point[0], 0, 0.1f);
-    camera_approach_f32_symmetric_bool(&sCutsceneVars[0].point[2], 125.f, 50.f);
-    // Update cvar0's angle
-    approach_vec3s_asymptotic(sCutsceneVars[0].angle, sMarioCamState->faceAngle, 16, 16, 16);
-
-    // Apply the offset to the camera's position
-    offset_rotated(pos, sCutsceneVars[1].point, sCutsceneVars[0].point, sCutsceneVars[0].angle);
-    approach_vec3f_asymptotic(c->pos, pos, 0.15f, 0.05f, 0.15f);
-
-    // Focus on Mario's eye height
-    set_focus_rel_mario(c, 0, 125.f, 0, 0);
-}
-
-/**
- * Plays when Mario opens the sliding doors.
- * Note: the star door unlocking event is not a cutscene, it's handled by Mario separately.
- */
-BAD_RETURN(s32) cutscene_sliding_doors_open(struct Camera *c) {
-    UNUSED u32 pad[2];
-
-    reset_pan_distance(c);
-    cutscene_event(cutscene_sliding_doors_open_start, c, 0, 8);
-    cutscene_event(cutscene_sliding_doors_open_set_cvars, c, 8, 8);
-    cutscene_event(cutscene_sliding_doors_go_under_doorway, c, 8, 28);
-    cutscene_event(cutscene_sliding_doors_fly_back_up, c, 29, -1);
-    cutscene_event(cutscene_sliding_doors_follow_mario, c, 8, -1);
-}
-
-/**
- * Ends the double door cutscene.
- */
-BAD_RETURN(s32) cutscene_double_doors_end(struct Camera *c) {
-    set_flag_post_door(c);
-    c->cutscene = 0;
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-}
-
-BAD_RETURN(s32) cutscene_enter_painting_stub(UNUSED struct Camera *c) {
-}
-
-/**
- * Plays when Mario enters a painting. The camera flies up to the painting's center, then it slowly
- * zooms in until the star select screen appears.
- */
-BAD_RETURN(s32) cutscene_enter_painting(struct Camera *c) {
-    struct Surface *floor, *highFloor;
-    Vec3f paintingPos, focus, focusOffset;
-    Vec3s paintingAngle;
-    f32 floorHeight;
-
-    cutscene_event(cutscene_enter_painting_stub, c, 0, 0);
-    // Zoom in
-    set_fov_function(CAM_FOV_APP_20);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-
-    if (gRipplingPainting != NULL) {
-        paintingAngle[0] = 0;
-        paintingAngle[1] = (s32)((gRipplingPainting->yaw / 360.f) * 65536.f); // convert degrees to IAU
-        paintingAngle[2] = 0;
-
-        focusOffset[0] = gRipplingPainting->size / 2;
-        focusOffset[1] = focusOffset[0];
-        focusOffset[2] = 0;
-
-        paintingPos[0] = gRipplingPainting->posX;
-        paintingPos[1] = gRipplingPainting->posY;
-        paintingPos[2] = gRipplingPainting->posZ;
-
-        offset_rotated(focus, paintingPos, focusOffset, paintingAngle);
-        approach_vec3f_asymptotic(c->focus, focus, 0.1f, 0.1f, 0.1f);
-        focusOffset[2] = -(((gRipplingPainting->size * 1000.f) / 2) / 307.f);
-        offset_rotated(focus, paintingPos, focusOffset, paintingAngle);
-        floorHeight = find_floor(focus[0], focus[1] + 500.f, focus[2], &highFloor) + 125.f;
-
-        if (focus[1] < floorHeight) {
-            focus[1] = floorHeight;
-        }
-
-        if (c->cutscene == CUTSCENE_ENTER_PAINTING) {
-            approach_vec3f_asymptotic(c->pos, focus, 0.2f, 0.1f, 0.2f);
-        } else {
-            approach_vec3f_asymptotic(c->pos, focus, 0.9f, 0.9f, 0.9f);
-        }
-
-        find_floor(sMarioCamState->pos[0], sMarioCamState->pos[1] + 50.f, sMarioCamState->pos[2], &floor);
-
-        if ((floor->type < SURFACE_PAINTING_WOBBLE_A6) || (floor->type > SURFACE_PAINTING_WARP_F9)) {
-            c->cutscene = 0;
-            gCutsceneTimer = CUTSCENE_STOP;
-            sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-        }
-    }
-    c->mode = CAMERA_MODE_CLOSE;
-}
-
-/**
- * Warp the camera to Mario, then use his faceAngle to calculate the right relative position.
- *
- * cvar0.point is Mario's position
- * cvar0.angle is Mario's faceAngle
- *
- * cvar1 is the camera's position relative to Mario
- * cvar2 is the camera's focus relative to Mario
- */
-BAD_RETURN(s32) cutscene_exit_painting_start(struct Camera *c) {
-    struct Surface *floor;
-    f32 floorHeight;
-
-    vec3f_set(sCutsceneVars[2].point, 258.f, -352.f, 1189.f);
-    vec3f_set(sCutsceneVars[1].point, 65.f, -155.f, 444.f);
-
-    if (gPrevLevel == LEVEL_TTM) {
-        sCutsceneVars[1].point[1] = 0.f;
-        sCutsceneVars[1].point[2] = 0.f;
-    }
-    vec3f_copy(sCutsceneVars[0].point, sMarioCamState->pos);
-    sCutsceneVars[0].angle[0] = 0;
-    sCutsceneVars[0].angle[1] = sMarioCamState->faceAngle[1];
-    sCutsceneVars[0].angle[2] = 0;
-    offset_rotated(c->focus, sCutsceneVars[0].point, sCutsceneVars[1].point, sCutsceneVars[0].angle);
-    offset_rotated(c->pos, sCutsceneVars[0].point, sCutsceneVars[2].point, sCutsceneVars[0].angle);
-    floorHeight = find_floor(c->pos[0], c->pos[1] + 10.f, c->pos[2], &floor);
-
-    if (floorHeight != FLOOR_LOWER_LIMIT) {
-        if (c->pos[1] < (floorHeight += 60.f)) {
-            c->pos[1] = floorHeight;
-        }
-    }
-}
-
-/**
- * Decrease cvar2's x and z offset, moving closer to Mario.
- */
-BAD_RETURN(s32) cutscene_exit_painting_move_to_mario(struct Camera *c) {
-    Vec3f pos;
-
-    //! Tricky math: Since offset_rotated() flips Z offsets, you'd expect a positive Z offset to move
-    //! the camera into the wall. However, Mario's faceAngle always points into the painting, so a
-    //! positive Z offset moves the camera "behind" Mario, away from the painting.
-    //!
-    //! In the success cutscene, when Mario jumps out face-first, only his gfx angle is updated. His
-    //! actual face angle isn't updated until after the cutscene.
-    approach_f32_asymptotic_bool(&sCutsceneVars[2].point[0], 178.f, 0.05f);
-    approach_f32_asymptotic_bool(&sCutsceneVars[2].point[2], 889.f, 0.05f);
-    offset_rotated(pos, sCutsceneVars[0].point, sCutsceneVars[2].point, sCutsceneVars[0].angle);
-    c->pos[0] = pos[0];
-    c->pos[2] = pos[2];
-}
-
-/**
- * Move the camera down to the floor Mario lands on.
- */
-BAD_RETURN(s32) cutscene_exit_painting_move_to_floor(struct Camera *c) {
-    struct Surface *floor;
-    Vec3f floorHeight;
-
-    vec3f_copy(floorHeight, sMarioCamState->pos);
-    floorHeight[1] = find_floor(sMarioCamState->pos[0], sMarioCamState->pos[1] + 10.f, sMarioCamState->pos[2], &floor);
-
-    if (floor != NULL) {
-        floorHeight[1] = floorHeight[1] + (sMarioCamState->pos[1] - floorHeight[1]) * 0.7f + 125.f;
-        approach_vec3f_asymptotic(c->focus, floorHeight, 0.2f, 0.2f, 0.2f);
-
-        if (floorHeight[1] < c->pos[1]) {
-            approach_f32_asymptotic_bool(&c->pos[1], floorHeight[1], 0.05f);
-        }
-    }
-}
-
-/**
- * Cutscene played when Mario leaves a painting, either due to death or collecting a star.
- */
-BAD_RETURN(s32) cutscene_exit_painting(struct Camera *c) {
-    cutscene_event(cutscene_exit_painting_start, c, 0, 0);
-    cutscene_event(cutscene_exit_painting_move_to_mario, c, 5, -1);
-    cutscene_event(cutscene_exit_painting_move_to_floor, c, 5, -1);
-
-    //! Hardcoded position. TTM's painting is close to an opposite wall, so just fix the pos.
-    if (gPrevLevel == LEVEL_TTM) {
-        vec3f_set(c->pos, -296.f, 1261.f, 3521.f);
-    }
-
-    update_camera_yaw(c);
-}
-
-/**
- * Unused. Warp the camera to Mario.
- */
-BAD_RETURN(s32) cutscene_unused_exit_start(struct Camera *c) {
-    UNUSED Vec3f unused1;
-    UNUSED Vec3s unused2;
-    Vec3f offset;
-    Vec3s marioAngle;
-
-    vec3f_set(offset, 200.f, 300.f, 200.f);
-    vec3s_set(marioAngle, 0, sMarioCamState->faceAngle[1], 0);
-    offset_rotated(c->pos, sMarioCamState->pos, offset, marioAngle);
-    set_focus_rel_mario(c, 0.f, 125.f, 0.f, 0);
-}
-
-/**
- * Unused. Focus on Mario as he exits.
- */
-BAD_RETURN(s32) cutscene_unused_exit_focus_mario(struct Camera *c) {
-    Vec3f focus;
-
-    vec3f_set(focus, sMarioCamState->pos[0], sMarioCamState->pos[1] + 125.f, sMarioCamState->pos[2]);
-    set_focus_rel_mario(c, 0.f, 125.f, 0.f, 0);
-    approach_vec3f_asymptotic(c->focus, focus, 0.02f, 0.001f, 0.02f);
-    update_camera_yaw(c);
-}
-
-/**
- * Give control back to the player.
- */
-BAD_RETURN(s32) cutscene_exit_painting_end(struct Camera *c) {
-    c->mode = CAMERA_MODE_CLOSE;
-    c->cutscene = 0;
-    gCutsceneTimer = CUTSCENE_STOP;
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    sStatusFlags &= ~CAM_FLAG_BLOCK_SMOOTH_MOVEMENT;
-    update_camera_yaw(c);
-}
-
-/**
- * End the cutscene, starting cannon mode.
- */
-BAD_RETURN(s32) cutscene_enter_cannon_end(struct Camera *c) {
-    sStatusFlags &= ~CAM_FLAG_SMOOTH_MOVEMENT;
-    sStatusFlags |= CAM_FLAG_BLOCK_SMOOTH_MOVEMENT;
-    c->mode = CAMERA_MODE_INSIDE_CANNON;
-    c->cutscene = 0;
-    sCannonYOffset = 800.f;
-}
-
-/**
- * Rotate around the cannon as it rises out of the hole.
- */
-BAD_RETURN(s32) cutscene_enter_cannon_raise(struct Camera *c) {
-    struct Object *o;
-    UNUSED u32 pad[2];
-    f32 floorHeight;
-    struct Surface *floor;
-    Vec3f cannonFocus;
-    Vec3s cannonAngle;
-
-    // Shake the camera when the cannon is fully raised
-    cutscene_event(cutscene_shake_explosion, c, 70, 70);
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    camera_approach_s16_symmetric_bool(&sCutsceneVars[1].angle[0], 0, 0x80);
-    camera_approach_s16_symmetric_bool(&sCutsceneVars[2].angle[0], 0, 0x80);
-    // Move the camera around the cannon, gradually rotating and moving closer
-    vec3f_set_dist_and_angle(sCutsceneVars[0].point, c->pos, sCutsceneVars[1].point[2], sCutsceneVars[1].angle[0],
-                             sCutsceneVars[1].angle[1]);
-    sCutsceneVars[1].point[2] = approach_f32(sCutsceneVars[1].point[2], 400.f, 5.f, 5.f);
-    sCutsceneVars[1].angle[1] += 0x40;
-    sCutsceneVars[3].point[1] += 2.f;
-    c->pos[1] += sCutsceneVars[3].point[1];
-
-    if ((o = sMarioCamState->usedObj) != NULL) {
-        sCutsceneVars[0].point[1] = o->oPosY;
-        cannonAngle[0] = o->oMoveAnglePitch;
-        cannonAngle[1] = o->oMoveAngleYaw;
-        cannonAngle[2] = o->oMoveAngleRoll;
-        c->focus[0] = o->oPosX;
-        c->focus[1] = o->oPosY;
-        c->focus[2] = o->oPosZ;
-        cannonFocus[0] = 0.f;
-        cannonFocus[1] = 100.f;
-        cannonFocus[2] = 0.f;
-        offset_rotated(c->focus, c->focus, cannonFocus, cannonAngle);
-    }
-
-    floorHeight = find_floor(c->pos[0], c->pos[1] + 500.f, c->pos[2], &floor) + 100.f;
-
-    if (c->pos[1] < floorHeight) {
-        c->pos[1] = floorHeight;
-    }
-}
-
-/**
- * Start the cannon entering cutscene
- */
-BAD_RETURN(s32) cutscene_enter_cannon_start(struct Camera *c) {
-    UNUSED u32 cvar3Start;
-    UNUSED u32 cvar4Start;
-    struct Object *o;
-
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    sMarioCamState->cameraEvent = 0;
-
-    // Store the cannon's position and angle in cvar0
-    if ((o = sMarioCamState->usedObj) != NULL) {
-        sCutsceneVars[0].point[0] = o->oPosX;
-        sCutsceneVars[0].point[1] = o->oPosY;
-        sCutsceneVars[0].point[2] = o->oPosZ;
-        sCutsceneVars[0].angle[0] = o->oMoveAnglePitch;
-        sCutsceneVars[0].angle[1] = o->oMoveAngleYaw;
-        sCutsceneVars[0].angle[2] = o->oMoveAngleRoll;
-    }
-
-    // Store the camera's polar offset from the cannon in cvar1
-    vec3f_get_dist_and_angle(sCutsceneVars[0].point, c->pos, &sCutsceneVars[1].point[2],
-                             &sCutsceneVars[1].angle[0], &sCutsceneVars[1].angle[1]);
-    sCutsceneVars[3].point[1] = 0.f;
-    //! cvar4 is unused in this cutscene
-    sCutsceneVars[4].point[1] = 0.f;
-}
-
-/**
- * Store the camera's pos and focus for the door cutscene
- */
-BAD_RETURN(s32) cutscene_door_start(struct Camera *c) {
-    vec3f_copy(sCutsceneVars[0].point, c->pos);
-    vec3f_copy(sCutsceneVars[1].point, c->focus);
-}
-
-/**
- * Fix the camera in place while the door opens.
- */
-BAD_RETURN(s32) cutscene_door_fix_cam(struct Camera *c) {
-    vec3f_copy(c->pos, sCutsceneVars[0].point);
-    vec3f_copy(c->focus, sCutsceneVars[1].point);
-}
-
-/**
- * Loop until Mario is no longer using the door.
- */
-BAD_RETURN(s32) cutscene_door_loop(struct Camera *c) {
-    //! bitwise AND instead of boolean
-    if ((sMarioCamState->action != ACT_PULLING_DOOR) & (sMarioCamState->action != ACT_PUSHING_DOOR)) {
-        gCutsceneTimer = CUTSCENE_STOP;
-        c->cutscene = 0;
-    }
-}
-
-/**
- * Warp the camera behind Mario.
- */
-BAD_RETURN(s32) cutscene_door_move_behind_mario(struct Camera *c) {
-    Vec3f camOffset;
-    s16 doorRotation;
-
-    reset_pan_distance(c);
-    determine_pushing_or_pulling_door(&doorRotation);
-    set_focus_rel_mario(c, 0.f, 125.f, 0.f, 0);
-    vec3s_set(sCutsceneVars[0].angle, 0, sMarioCamState->faceAngle[1] + doorRotation, 0);
-    vec3f_set(camOffset, 0.f, 125.f, 250.f);
-
-    if (doorRotation == 0) { //! useless code
-        camOffset[0] = 0.f;
-    } else {
-        camOffset[0] = 0.f;
-    }
-
-    offset_rotated(c->pos, sMarioCamState->pos, camOffset, sCutsceneVars[0].angle);
-}
-
-/**
- * Follow Mario through the door.
- */
-BAD_RETURN(s32) cutscene_door_follow_mario(struct Camera *c) {
-    s16 pitch, yaw;
-    f32 dist;
-
-    set_focus_rel_mario(c, 0.f, 125.f, 0.f, 0);
-    vec3f_get_dist_and_angle(c->focus, c->pos, &dist, &pitch, &yaw);
-    camera_approach_f32_symmetric_bool(&dist, 150.f, 7.f);
-    vec3f_set_dist_and_angle(c->focus, c->pos, dist, pitch, yaw);
-    update_camera_yaw(c);
-}
-
-/**
- * Ends the door cutscene. Sets the camera mode to close mode unless the default is free roam.
- */
-BAD_RETURN(s32) cutscene_door_end(struct Camera *c) {
-    if (c->defMode == CAMERA_MODE_FREE_ROAM) {
-        c->mode = CAMERA_MODE_FREE_ROAM;
-    } else {
-        c->mode = CAMERA_MODE_CLOSE;
-    }
-
-    c->cutscene = 0;
-    gCutsceneTimer = CUTSCENE_STOP;
-    sStatusFlags |= CAM_FLAG_SMOOTH_MOVEMENT;
-    sStatusFlags &= ~CAM_FLAG_BLOCK_SMOOTH_MOVEMENT;
-    set_flag_post_door(c);
-    update_camera_yaw(c);
-}
-
-/**
- * Used for entering a room that uses a specific camera mode, like the castle lobby or BBH
- */
-BAD_RETURN(s32) cutscene_door_mode(struct Camera *c) {
-    UNUSED u32 pad[2];
-
-    reset_pan_distance(c);
-    camera_course_processing(c);
-
-    if (c->mode == CAMERA_MODE_FIXED) {
-        c->nextYaw = update_fixed_camera(c, c->focus, c->pos);
-    }
-    if (c->mode == CAMERA_MODE_PARALLEL_TRACKING) {
-        c->nextYaw = update_parallel_tracking_camera(c, c->focus, c->pos);
-    }
-
-    c->yaw = c->nextYaw;
-
-    // Loop until Mario is no longer using the door
-    if (sMarioCamState->action != ACT_ENTERING_STAR_DOOR &&
-        sMarioCamState->action != ACT_PULLING_DOOR &&
-        sMarioCamState->action != ACT_PUSHING_DOOR) {
-        gCutsceneTimer = CUTSCENE_STOP;
-        c->cutscene = 0;
-    }
-}
-
-/******************************************************************************************************
- * Cutscenes
- ******************************************************************************************************/
-
-/**
- * Cutscene that plays when Mario beats the game.
- */
-struct Cutscene sCutsceneEnding[] = {
-    { cutscene_ending_mario_fall, 170 },
-    { cutscene_ending_mario_land, 70 },
-#ifdef VERSION_EU
-    { cutscene_ending_mario_land_closeup, 0x44 },
-    { cutscene_ending_stars_free_peach,  0x15c },
-    { cutscene_ending_peach_appears, 0x6d  },
-    { cutscene_ending_peach_descends, 0x212 },
-    { cutscene_ending_mario_to_peach, 0x69 },
-    { cutscene_ending_peach_wakeup, 0x1a4 },
-    { cutscene_ending_dialog, 0x114 },
-    { cutscene_ending_kiss, 0x10b },
-#else
-    { cutscene_ending_mario_land_closeup, 75 },
-#ifdef VERSION_SH
-    { cutscene_ending_stars_free_peach, 431 },
-#else
-    { cutscene_ending_stars_free_peach, 386 },
-#endif
-    { cutscene_ending_peach_appears, 139 },
-    { cutscene_ending_peach_descends, 590 },
-    { cutscene_ending_mario_to_peach, 95 },
-#ifdef VERSION_SH
-    { cutscene_ending_peach_wakeup, 455 },
-    { cutscene_ending_dialog, 286 },
-#else
-    { cutscene_ending_peach_wakeup, 425 },
-    { cutscene_ending_dialog, 236 },
-#endif
-    { cutscene_ending_kiss, 245 },
-#endif
-    { cutscene_ending_cake_for_mario, CUTSCENE_LOOP },
-    { cutscene_ending_stop, 0 }
-};
-
-/**
- * Cutscene that plays when Mario collects the grand star from bowser.
- */
-struct Cutscene sCutsceneGrandStar[] = {
-    { cutscene_grand_star, 360 },
-    { cutscene_grand_star_fly, CUTSCENE_LOOP }
-};
-
-struct Cutscene sCutsceneUnused[] = {
-    { cutscene_unused_start, 1 },
-    { cutscene_unused_loop, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario enters a door that warps to another area.
- */
-struct Cutscene sCutsceneDoorWarp[] = {
-    { cutscene_door_start, 1 },
-    { cutscene_door_loop, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays after the credits, when Lakitu is flying away from the castle.
- */
-struct Cutscene sCutsceneEndWaving[] = {
-    { cutscene_end_waving, CUTSCENE_LOOP }
-};
-
-/**
- * The game's credits.
- */
-struct Cutscene sCutsceneCredits[] = {
-    { cutscene_credits, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario pulls open a door.
- */
-struct Cutscene sCutsceneDoorPull[] = {
-    { cutscene_door_start, 1 },
-    { cutscene_door_fix_cam, 30 },
-    { cutscene_door_move_behind_mario, 1 },
-    { cutscene_door_follow_mario, 50 },
-    { cutscene_door_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario pushes open a door.
- */
-struct Cutscene sCutsceneDoorPush[] = {
-    { cutscene_door_start, 1 },
-    { cutscene_door_fix_cam, 20 },
-    { cutscene_door_move_behind_mario, 1 },
-    { cutscene_door_follow_mario, 50 },
-    { cutscene_door_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario pulls open a door that has some special mode requirement on the other
- * side.
- */
-struct Cutscene sCutsceneDoorPullMode[] = {
-    { cutscene_door_start, 1 },
-    { cutscene_door_fix_cam, 30 },
-    { cutscene_door_mode, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario pushes open a door that has some special mode requirement on the other
- * side.
- */
-struct Cutscene sCutsceneDoorPushMode[] = {
-    { cutscene_door_start, 1 },
-    { cutscene_door_fix_cam, 20 },
-    { cutscene_door_mode, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario enters the cannon and it rises out of the hole.
- */
-struct Cutscene sCutsceneEnterCannon[] = {
-    { cutscene_enter_cannon_start, 1 },
-    { cutscene_enter_cannon_raise, 121 },
-    { cutscene_enter_cannon_end, 0 }
-};
-
-/**
- * Cutscene that plays when a star spawns from ie a box or after a boss fight.
- */
-struct Cutscene sCutsceneStarSpawn[] = {
-    { cutscene_star_spawn, CUTSCENE_LOOP },
-    { cutscene_star_spawn_back, 15 },
-    { cutscene_star_spawn_end, 0 }
-};
-
-/**
- * Cutscene for the red coin star spawning. Compared to a regular star, this cutscene can warp long
- * distances.
- */
-struct Cutscene sCutsceneRedCoinStarSpawn[] = {
-    { cutscene_red_coin_star, CUTSCENE_LOOP },
-    { cutscene_red_coin_star_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario enters a course painting.
- */
-struct Cutscene sCutsceneEnterPainting[] = {
-    { cutscene_enter_painting, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario dies and warps back to the castle.
- */
-struct Cutscene sCutsceneDeathExit[] = {
-    { cutscene_exit_painting, 118 },
-    { cutscene_exit_painting_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario warps to the castle after collecting a star.
- */
-struct Cutscene sCutsceneExitPaintingSuccess[] = {
-    { cutscene_exit_painting, 180 },
-    { cutscene_exit_painting_end, 0 }
-};
-
-struct Cutscene sCutsceneUnusedExit[] = {
-    { cutscene_unused_exit_start, 1 },
-    { cutscene_unused_exit_focus_mario, 60 },
-    { cutscene_exit_painting_end, 0 }
-};
-
-/**
- * The intro of the game. Peach reads her letter and Lakitu flies down to Mario's warp pipe.
- */
-struct Cutscene sCutsceneIntroPeach[] = {
-    { cutscene_intro_peach_letter, CUTSCENE_LOOP },
-    { cutscene_intro_peach_reset_fov, 35 },
-#ifdef VERSION_EU
-    { cutscene_intro_peach_fly_to_pipe, 675 },
-#else
-    { cutscene_intro_peach_fly_to_pipe, 820 },
-#endif
-    { cutscene_intro_peach_mario_appears, 270 },
-    { cutscene_intro_peach_dialog, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when a cannon door is opened.
- */
-struct Cutscene sCutscenePrepareCannon[] = {
-    { cutscene_prepare_cannon, 170 },
-    { cutscene_prepare_cannon_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario enters the castle grounds after leaving CotMC through the waterfall.
- */
-struct Cutscene sCutsceneExitWaterfall[] = {
-    { cutscene_exit_waterfall, 52 },
-    { cutscene_exit_to_castle_grounds_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario falls from WMOTR.
- */
-struct Cutscene sCutsceneFallToCastleGrounds[] = {
-    { cutscene_exit_fall_to_castle_grounds, 73 },
-    { cutscene_exit_to_castle_grounds_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario enters the pyramid through the hole at the top.
- */
-struct Cutscene sCutsceneEnterPyramidTop[] = {
-    { cutscene_enter_pyramid_top, 90 },
-    { cutscene_exit_to_castle_grounds_end, 0 }
-};
-
-/**
- * Unused cutscene for when the pyramid explodes.
- */
-struct Cutscene sCutscenePyramidTopExplode[] = {
-    { cutscene_mario_dialog, CUTSCENE_LOOP },
-    { cutscene_pyramid_top_explode, 150 },
-    { cutscene_pyramid_top_explode_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario dies while standing, or from electrocution.
- */
-struct Cutscene sCutsceneStandingDeath[] = {
-    { cutscene_death_standing, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario enters HMC or CotMC.
- */
-struct Cutscene sCutsceneEnterPool[] = {
-    { cutscene_enter_pool, 100 },
-    { cutscene_exit_to_castle_grounds_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario dies on his stomach.
- */
-struct Cutscene sCutsceneDeathStomach[] = {
-    { cutscene_death_stomach, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario dies on his back.
- */
-struct Cutscene sCutsceneDeathOnBack[] = {
-    { cutscene_bbh_death, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario dies in quicksand.
- */
-struct Cutscene sCutsceneQuicksandDeath[] = {
-    { cutscene_quicksand_death, CUTSCENE_LOOP },
-};
-
-/**
- * Unused cutscene for ACT_WATER_DEATH, which happens when Mario gets hit by an enemy under water.
- */
-struct Cutscene sCutsceneWaterDeath[] = {
-    { cutscene_quicksand_death, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario suffocates.
- */
-struct Cutscene sCutsceneSuffocation[] = {
-    { cutscene_suffocation, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when entering bowser's arenas.
- */
-struct Cutscene sCutsceneEnterBowserArena[] = {
-    { cutscene_bowser_arena, 180 },
-    { cutscene_bowser_arena_dialog, CUTSCENE_LOOP },
-    { cutscene_bowser_arena_end, 0 }
-};
-
-// The dance cutscenes are automatically stopped since reset_camera() is called after Mario warps.
-
-/**
- * Star dance cutscene.
- * For the default dance, the camera moves closer to Mario, then stays in place.
- * For the rotate dance, the camera moves closer and rotates clockwise around Mario.
- */
-struct Cutscene sCutsceneDanceDefaultRotate[] = {
-    { cutscene_dance_default_rotate, CUTSCENE_LOOP }
-};
-
-/**
- * Star dance cutscene.
- * The camera moves closer and rotates clockwise around Mario.
- */
-struct Cutscene sCutsceneDanceFlyAway[] = {
-    { cutscene_dance_fly_away, CUTSCENE_LOOP }
-};
-
-/**
- * Star dance cutscene.
- * The camera moves in for a closeup on Mario. Used in tight spaces and underwater.
- */
-struct Cutscene sCutsceneDanceCloseup[] = {
-    { cutscene_dance_closeup, CUTSCENE_LOOP }
-};
-
-/**
- * Star dance cutscene.
- * The camera moves closer and rotates clockwise around Mario.
- */
-struct Cutscene sCutsceneKeyDance[] = {
-    { cutscene_key_dance, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario presses a cap switch.
- */
-struct Cutscene sCutsceneCapSwitchPress[] = {
-    { cutscene_cap_switch_press, CUTSCENE_LOOP }
-};
-
-/**
- * Cutscene that plays when Mario opens a sliding star door.
- */
-struct Cutscene sCutsceneSlidingDoorsOpen[] = {
-    { cutscene_sliding_doors_open, 50 },
-    { cutscene_double_doors_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario unlocks the basement or upstairs key door.
- */
-struct Cutscene sCutsceneUnlockKeyDoor[] = {
-    { cutscene_unlock_key_door, 200 },
-    { cutscene_double_doors_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario exits bowser's arena after getting the key.
- */
-struct Cutscene sCutsceneExitBowserSuccess[] = {
-    { cutscene_exit_bowser_succ, 190 },
-    { cutscene_non_painting_end, 0 }
-};
-
-/**
- * Unused cutscene for when Mario dies in bowser's arena. Instead, Mario just respawns at the warp pipe.
- */
-struct Cutscene sCutsceneExitBowserDeath[] = {
-    { cutscene_exit_bowser_death, 120 },
-    { cutscene_non_painting_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario exits a non-painting course, like HMC.
- */
-struct Cutscene sCutsceneExitSpecialSuccess[] = {
-    { cutscene_exit_non_painting_succ, 163 },
-    { cutscene_non_painting_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario exits from dying in a non-painting course, like HMC.
- */
-struct Cutscene sCutsceneNonPaintingDeath[] = {
-    { cutscene_non_painting_death, 120 },
-    { cutscene_non_painting_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario talks to a creature.
- */
-struct Cutscene sCutsceneDialog[] = {
-    { cutscene_dialog, CUTSCENE_LOOP },
-    { cutscene_dialog_set_flag, 12 },
-    { cutscene_dialog_end, 0 }
-};
-
-/**
- * Cutscene that plays when Mario reads a sign or message.
- */
-struct Cutscene sCutsceneReadMessage[] = {
-    { cutscene_read_message, CUTSCENE_LOOP },
-    { cutscene_read_message_set_flag, 15 },
-    { cutscene_read_message_end, 0 }
-};
-
-/* TODO:
- * The next two arrays are both related to levels, and they look generated.
- * These should be split into their own file.
- */
-
-/**
- * Converts the u32 given in DEFINE_COURSE to a u8 with the odd and even digits rotated into the right
- * order for sDanceCutsceneIndexTable
- */
-#define DROT(value, index) ((value >> (32 - (index + 1) * 8)) & 0xF0) >> 4 | \
-                           ((value >> (32 - (index + 1) * 8)) & 0x0F) << 4
-
-#define DANCE_ENTRY(c) { DROT(c, 0), DROT(c, 1), DROT(c, 2), DROT(c, 3) },
-
-#define DEFINE_COURSE(_0, cutscenes) DANCE_ENTRY(cutscenes)
-#define DEFINE_COURSES_END()
-#define DEFINE_BONUS_COURSE(_0, cutscenes) DANCE_ENTRY(cutscenes)
-
-/**
- * Each hex digit is an index into sDanceCutsceneTable.
- *
- * 0: Lakitu flies away after the dance
- * 1: Only rotates the camera, doesn't zoom out
- * 2: The camera goes to a close up of Mario
- * 3: Bowser keys and the grand star
- * 4: Default, used for 100 coin stars, 8 red coin stars in bowser levels, and secret stars
- */
-u8 sDanceCutsceneIndexTable[][4] = {
-    #include "levels/course_defines.h"
-    { 0x44, 0x44, 0x44, 0x04 }, // (26) Why go to all this trouble to save bytes and do this?!
-};
-#undef DEFINE_COURSE
-#undef DEFINE_COURSES_END
-#undef DEFINE_BONUS_COURSE
-
-#undef DANCE_ENTRY
-#undef DROT
-
-/**
- * These masks set whether or not the camera zooms out when game is paused.
- *
- * Each entry is used by two levels. Even levels use the low 4 bits, odd levels use the high 4 bits
- * Because areas are 1-indexed, a mask of 0x1 will make area 1 (not area 0) zoom out.
- *
- * In zoom_out_if_paused_and_outside(), the current area is converted to a shift.
- * Then the value of (1 << shift) is &'d with the level's mask,
- * and if the result is non-zero, the camera will zoom out.
+ * These masks set whether or not the camera zooms out when game is paused.
+ *
+ * Each entry is used by two levels. Even levels use the low 4 bits, odd levels use the high 4 bits
+ * Because areas are 1-indexed, a mask of 0x1 will make area 1 (not area 0) zoom out.
+ *
+ * In zoom_out_if_paused_and_outside(), the current area is converted to a shift.
+ * Then the value of (1 << shift) is &'d with the level's mask,
+ * and if the result is non-zero, the camera will zoom out.
  */
 u8 sZoomOutAreaMasks[] = {
 	ZOOMOUT_AREA_MASK(0, 0, 0, 0, 0, 0, 0, 0), // Unused         | Unused
@@ -10882,453 +6810,6 @@ u8 sZoomOutAreaMasks[] = {
 
 STATIC_ASSERT(ARRAY_COUNT(sZoomOutAreaMasks) - 1 == LEVEL_MAX / 2, "Make sure you edit sZoomOutAreaMasks when adding / removing courses.");
 
-/*
- * credits spline paths.
- * TODO: Separate these into their own file(s)
- */
-
-struct CutsceneSplinePoint sBobCreditsSplinePositions[] = {
-    { 1, 0, { 5984, 3255, 4975 } },
-    { 2, 0, { 4423, 3315, 1888 } },
-    { 3, 0, { 776, 2740, -1825 } },
-    { 4, 0, { -146, 3894, -3167 } },
-    { -1, 0, { 741, 4387, -5474 } }
-};
-
-struct CutsceneSplinePoint sBobCreditsSplineFocus[] = {
-    { 0, 30, { 5817, 3306, 4507 } },
-    { 0, 40, { 4025, 3378, 1593 } },
-    { 0, 50, { 1088, 2652, -2205 } },
-    { 0, 60, { 205, 3959, -3517 } },
-    { -1, 60, { 1231, 4400, -5649 } }
-};
-
-struct CutsceneSplinePoint sWfCreditsSplinePositions[] = {
-    { 0, 0, { -301, 1399, 2643 } },
-    { 0, 0, { -182, 2374, 4572 } },
-    { 0, 0, { 4696, 3864, 413 } },
-    { 0, 0, { 1738, 4891, -1516 } },
-    { -1, 0, { 1783, 4891, -1516 } }
-};
-
-struct CutsceneSplinePoint sWfCreditsSplineFocus[] = {
-    { 1, 30, { -249, 1484, 2153 } },
-    { 2, 40, { -200, 2470, 4082 } },
-    { 3, 40, { 4200, 3916, 370 } },
-    { 4, 40, { 1523, 4976, -1072 } },
-    { -1, 40, { 1523, 4976, -1072 } }
-};
-
-struct CutsceneSplinePoint sJrbCreditsSplinePositions[] = {
-    { 0, 0, { 5538, -4272, 2376 } },
-    { 0, 0, { 5997, -3303, 2261 } },
-    { 0, 0, { 6345, -3255, 2179 } },
-    { 0, 0, { 6345, -3255, 2179 } },
-    { -1, 0, { 6694, -3203, 2116 } }
-};
-
-struct CutsceneSplinePoint sJrbCreditsSplineFocus[] = {
-    { 0, 50, { 5261, -4683, 2443 } },
-    { 0, 50, { 5726, -3675, 2456 } },
-    { 0, 50, { 6268, -2817, 2409 } },
-    { 0, 50, { 6596, -2866, 2369 } },
-    { -1, 50, { 7186, -3153, 2041 } }
-};
-
-struct CutsceneSplinePoint sCcmSlideCreditsSplinePositions[] = {
-    { 0, 0, { -6324, 6745, -5626 } },
-    { 1, 0, { -6324, 6745, -5626 } },
-    { 2, 0, { -6108, 6762, -5770 } },
-    { 3, 0, { -5771, 6787, -5962 } },
-    { -1, 0, { -5672, 6790, -5979 } }
-};
-
-struct CutsceneSplinePoint sCcmSlideCreditsSplineFocus[] = {
-    { 0, 50, { -5911, 6758, -5908 } },
-    { 1, 50, { -5911, 6758, -5908 } },
-    { 2, 50, { -5652, 6814, -5968 } },
-    { 3, 50, { -5277, 6801, -6043 } },
-    { -1, 50, { -5179, 6804, -6060 } }
-};
-
-struct CutsceneSplinePoint sBbhCreditsSplinePositions[] = {
-    { 1, 0, { 1088, 341, 2447 } },
-    { 2, 0, { 1338, 610, 2808 } },
-    { 3, 0, { 2267, 1612, 2966 } },
-    { -1, 0, { 2296, 1913, 2990 } }
-};
-
-struct CutsceneSplinePoint sBbhCreditsSplineFocus[] = {
-    { 1, 50, { 1160, 263, 1958 } },
-    { 2, 50, { 1034, 472, 2436 } },
-    { 3, 50, { 1915, 1833, 2688 } },
-    { -1, 50, { 2134, 2316, 2742 } }
-};
-
-struct CutsceneSplinePoint sHmcCreditsSplinePositions[] = {
-    { 1, 0, { -5952, 1807, -5882 } },
-    { 2, 0, { -5623, 1749, -4863 } },
-    { 3, 0, { -5472, 1955, -2520 } },
-    { 4, 0, { -5544, 1187, -1085 } },
-    { -1, 0, { -5547, 391, -721 } }
-};
-
-struct CutsceneSplinePoint sHmcCreditsSplineFocus[] = {
-    { 1, 210, { -5952, 1884, -6376 } },
-    { 2, 58, { -5891, 1711, -5283 } },
-    { 3, 30, { -5595, 1699, -2108 } },
-    { 4, 31, { -5546, 794, -777 } },
-    { -1, 31, { -5548, -85, -572 } }
-};
-
-struct CutsceneSplinePoint sThiWigglerCreditsSplinePositions[] = {
-    { 1, 0, { -1411, 2474, -1276 } },
-    { 2, 0, { -1606, 2479, -434 } },
-    { -1, 0, { -1170, 2122, 1337 } }
-};
-
-struct CutsceneSplinePoint sThiWigglerCreditsSplineFocus[] = {
-    { 1, 50, { -1053, 2512, -928 } },
-    { 2, 50, { -1234, 2377, -114 } },
-    { -1, 50, { -758, 2147, 1054 } }
-};
-
-struct CutsceneSplinePoint sVolcanoCreditsSplinePositions[] = {
-    { 0, 0, { -1445, 1094, 1617 } },
-    { 0, 0, { -1509, 649, 871 } },
-    { 0, 0, { -1133, 420, -248 } },
-    { 0, 0, { -778, 359, -1052 } },
-    { 0, 0, { -565, 260, -1730 } },
-    { -1, 0, { 1274, 473, -275 } }
-};
-
-struct CutsceneSplinePoint sVolcanoCreditsSplineFocus[] = {
-    { 0, 50, { -1500, 757, 1251 } },
-    { 0, 50, { -1401, 439, 431 } },
-    { 0, 50, { -749, 270, -532 } },
-    { 0, 50, { -396, 270, -1363 } },
-    { 0, 50, { -321, 143, -2151 } },
-    { -1, 50, { 1002, 460, -694 } }
-};
-
-struct CutsceneSplinePoint sSslCreditsSplinePositions[] = {
-    { 0, 0, { -4262, 4658, -5015 } },
-    { 0, 0, { -3274, 2963, -4661 } },
-    { 0, 0, { -2568, 812, -6528 } },
-    { 0, 0, { -414, 660, -7232 } },
-    { 0, 0, { 1466, 660, -6898 } },
-    { -1, 0, { 2724, 660, -6298 } }
-};
-
-struct CutsceneSplinePoint sSslCreditsSplineFocus[] = {
-    { 0, 50, { -4083, 4277, -4745 } },
-    { 0, 50, { -2975, 2574, -4759 } },
-    { 0, 50, { -2343, 736, -6088 } },
-    { 0, 50, { -535, 572, -6755 } },
-    { 0, 50, { 1311, 597, -6427 } },
-    { -1, 50, { 2448, 612, -5884 } }
-};
-
-struct CutsceneSplinePoint sDddCreditsSplinePositions[] = {
-    { 0, 0, { -874, -4933, 366 } },
-    { 0, 0, { -1463, -4782, 963 } },
-    { 0, 0, { -1893, -4684, 1303 } },
-    { 0, 0, { -2818, -4503, 1583 } },
-    { 0, 0, { -4095, -2924, 730 } },
-    { 0, 0, { -4737, -1594, -63 } },
-    { -1, 0, { -4681, -1084, -623 } }
-};
-
-struct CutsceneSplinePoint sDddCreditsSplineFocus[] = {
-    { 0, 50, { -1276, -4683, 622 } },
-    { 0, 50, { -1858, -4407, 1097 } },
-    { 0, 50, { -2324, -4332, 1318 } },
-    { 0, 50, { -3138, -4048, 1434 } },
-    { 0, 50, { -4353, -2444, 533 } },
-    { 0, 50, { -4807, -1169, -436 } },
-    { -1, 50, { -4665, -664, -1007 } }
-};
-
-struct CutsceneSplinePoint sSlCreditsSplinePositions[] = {
-    { 0, 0, { 939, 6654, 6196 } },
-    { 0, 0, { 1873, 5160, 3714 } },
-    { 0, 0, { 3120, 3564, 1314 } },
-    { -1, 0, { 2881, 4231, 573 } }
-};
-
-struct CutsceneSplinePoint sSlCreditsSplineFocus[] = {
-    { 0, 50, { 875, 6411, 5763 } },
-    { 0, 50, { 1659, 4951, 3313 } },
-    { 0, 50, { 2630, 3565, 1215 } },
-    { -1, 50, { 2417, 4056, 639 } }
-};
-
-struct CutsceneSplinePoint sWdwCreditsSplinePositions[] = {
-    { 0, 0, { 3927, 2573, 3685 } },
-    { 0, 0, { 2389, 2054, 1210 } },
-    { 0, 0, { 2309, 2069, 22 } },
-    { -1, 0, { 2122, 2271, -979 } }
-};
-
-struct CutsceneSplinePoint sWdwCreditsSplineFocus[] = {
-    { 0, 50, { 3637, 2460, 3294 } },
-    { 0, 50, { 1984, 2067, 918 } },
-    { 0, 50, { 1941, 2255, -261 } },
-    { -1, 50, { 1779, 2587, -1158 } }
-};
-
-struct CutsceneSplinePoint sTtmCreditsSplinePositions[] = {
-    { 0, 0, { 386, 2535, 644 } },
-    { 0, 0, { 1105, 2576, 918 } },
-    { 0, 0, { 3565, 2261, 2098 } },
-    { 0, 0, { 6715, -2791, 4554 } },
-    { 0, 0, { 3917, -3130, 3656 } },
-    { -1, 0, { 3917, -3130, 3656 } }
-};
-
-struct CutsceneSplinePoint sTtmCreditsSplineFocus[] = {
-    { 1, 50, { 751, 2434, 318 } },
-    { 2, 50, { 768, 2382, 603 } },
-    { 3, 60, { 3115, 2086, 1969 } },
-    { 4, 30, { 6370, -3108, 4727 } },
-    { 5, 50, { 4172, -3385, 4001 } },
-    { -1, 50, { 4172, -3385, 4001 } }
-};
-
-struct CutsceneSplinePoint sThiHugeCreditsSplinePositions[] = {
-    { 0, 0, { 6990, -1000, -4858 } },
-    { 0, 0, { 7886, -1055, 2878 } },
-    { 0, 0, { 1952, -1481, 10920 } },
-    { 0, 0, { -1684, -219, 2819 } },
-    { 0, 0, { -2427, -131, 2755 } },
-    { 0, 0, { -3246, 416, 3286 } },
-    { -1, 0, { -3246, 416, 3286 } }
-};
-
-struct CutsceneSplinePoint sThiHugeCreditsSplineFocus[] = {
-    { 1, 70, { 7022, -965, -5356 } },
-    { 2, 40, { 7799, -915, 2405 } },
-    { 3, 60, { 1878, -1137, 10568 } },
-    { 4, 50, { -1931, -308, 2394 } },
-    { 5, 50, { -2066, -386, 2521 } },
-    { 6, 50, { -2875, 182, 3045 } },
-    { -1, 50, { -2875, 182, 3045 } }
-};
-
-struct CutsceneSplinePoint sTtcCreditsSplinePositions[] = {
-    { 1, 0, { -1724, 277, -994 } },
-    { 2, 0, { -1720, 456, -995 } },
-    { 3, 0, { -1655, 810, -1014 } },
-    { -1, 0, { -1753, 883, -1009 } }
-};
-
-struct CutsceneSplinePoint sTtcCreditsSplineFocus[] = {
-    { 1, 50, { -1554, 742, -1063 } },
-    { 2, 50, { -1245, 571, -1102 } },
-    { 3, 50, { -1220, 603, -1151 } },
-    { -1, 50, { -1412, 520, -1053 } }
-};
-
-struct CutsceneSplinePoint sRrCreditsSplinePositions[] = {
-    { 0, 0, { -1818, 4036, 97 } },
-    { 0, 0, { -575, 3460, -505 } },
-    { 0, 0, { 1191, 3611, -1134 } },
-    { -1, 0, { 2701, 3777, -3686 } }
-};
-
-struct CutsceneSplinePoint sRrCreditsSplineFocus[] = {
-    { 0, 50, { -1376, 3885, -81 } },
-    { 0, 50, { -146, 3343, -734 } },
-    { 0, 50, { 1570, 3446, -1415 } },
-    { -1, 50, { 2794, 3627, -3218 } }
-};
-
-struct CutsceneSplinePoint sSaCreditsSplinePositions[] = {
-    { 0, 0, { -295, -396, -585 } },
-    { 1, 0, { -295, -396, -585 } },
-    { 2, 0, { -292, -856, -573 } },
-    { 3, 0, { -312, -856, -541 } },
-    { -1, 0, { 175, -856, -654 } }
-};
-
-struct CutsceneSplinePoint sSaCreditsSplineFocus[] = {
-    { 0, 50, { -175, -594, -142 } },
-    { 1, 50, { -175, -594, -142 } },
-    { 2, 50, { -195, -956, -92 } },
-    { 3, 50, { -572, -956, -150 } },
-    { -1, 50, { -307, -956, -537 } }
-};
-
-struct CutsceneSplinePoint sCotmcCreditsSplinePositions[] = {
-    { 0, 0, { -296, 495, 1607 } },
-    { 0, 0, { -430, 541, 654 } },
-    { 0, 0, { -466, 601, -359 } },
-    { 0, 0, { -217, 433, -1549 } },
-    { -1, 0, { -95, 366, -2922 } }
-};
-
-struct CutsceneSplinePoint sCotmcCreditsSplineFocus[] = {
-    { 0, 50, { -176, 483, 2092 } },
-    { 0, 50, { -122, 392, 1019 } },
-    { 0, 50, { -268, 450, -792 } },
-    { 0, 50, { -172, 399, -2046 } },
-    { -1, 50, { -51, 355, -3420 } }
-};
-
-struct CutsceneSplinePoint sDddSubCreditsSplinePositions[] = {
-    { 0, 0, { 4656, 2171, 5028 } },
-    { 0, 0, { 4548, 1182, 4596 } },
-    { 0, 0, { 5007, 813, 3257 } },
-    { 0, 0, { 5681, 648, 1060 } },
-    { -1, 0, { 4644, 774, 113 } }
-};
-
-struct CutsceneSplinePoint sDddSubCreditsSplineFocus[] = {
-    { 0, 50, { 4512, 2183, 4549 } },
-    { 0, 50, { 4327, 838, 4308 } },
-    { 0, 50, { 4774, 749, 2819 } },
-    { 0, 50, { 5279, 660, 763 } },
-    { -1, 50, { 4194, 885, -75 } }
-};
-
-struct CutsceneSplinePoint sCcmOutsideCreditsSplinePositions[] = {
-    { 1, 0, { 1427, -1387, 5409 } },
-    { 2, 0, { -1646, -1536, 4526 } },
-    { 3, 0, { -3852, -1448, 3913 } },
-    { -1, 0, { -5199, -1366, 1886 } }
-};
-
-struct CutsceneSplinePoint sCcmOutsideCreditsSplineFocus[] = {
-    { 1, 50, { 958, -1481, 5262 } },
-    { 2, 50, { -2123, -1600, 4391 } },
-    { 3, 50, { -3957, -1401, 3426 } },
-    { -1, 50, { -4730, -1215, 1795 } }
-};
-
-/**
- * Play the current cutscene until either gCutsceneTimer reaches the max time, or c->cutscene is set to 0
- *
- * Note that CAM_FLAG_SMOOTH_MOVEMENT is cleared while a cutscene is playing, so cutscenes set it for
- * the duration they want the flag to be active.
- */
-void play_cutscene(struct Camera *c) {
-    UNUSED u32 pad[3];
-    UNUSED s16 unusedYawFocToMario;
-    s16 cutsceneDuration;
-    u8 oldCutscene;
-
-    unusedYawFocToMario = sAreaYaw;
-    oldCutscene = c->cutscene;
-    sStatusFlags &= ~CAM_FLAG_SMOOTH_MOVEMENT;
-    gCameraMovementFlags &= ~CAM_MOVING_INTO_MODE;
-
-#define CUTSCENE(id, cutscene)                                                                            \
-    case id:                                                                                              \
-        cutsceneDuration = cutscene[sCutsceneShot].duration;                                              \
-        cutscene[sCutsceneShot].shot(c);                                                                  \
-        break;
-
-    switch (c->cutscene) {
-        CUTSCENE(CUTSCENE_STAR_SPAWN, sCutsceneStarSpawn)
-        CUTSCENE(CUTSCENE_RED_COIN_STAR_SPAWN, sCutsceneRedCoinStarSpawn)
-        CUTSCENE(CUTSCENE_ENDING, sCutsceneEnding)
-        CUTSCENE(CUTSCENE_GRAND_STAR, sCutsceneGrandStar)
-        CUTSCENE(CUTSCENE_DOOR_WARP, sCutsceneDoorWarp)
-        CUTSCENE(CUTSCENE_DOOR_PULL, sCutsceneDoorPull)
-        CUTSCENE(CUTSCENE_DOOR_PUSH, sCutsceneDoorPush)
-        CUTSCENE(CUTSCENE_DOOR_PULL_MODE, sCutsceneDoorPullMode)
-        CUTSCENE(CUTSCENE_DOOR_PUSH_MODE, sCutsceneDoorPushMode)
-        CUTSCENE(CUTSCENE_ENTER_CANNON, sCutsceneEnterCannon)
-        CUTSCENE(CUTSCENE_ENTER_PAINTING, sCutsceneEnterPainting)
-        CUTSCENE(CUTSCENE_DEATH_EXIT, sCutsceneDeathExit)
-        CUTSCENE(CUTSCENE_EXIT_PAINTING_SUCC, sCutsceneExitPaintingSuccess)
-        CUTSCENE(CUTSCENE_UNUSED_EXIT, sCutsceneUnusedExit)
-        CUTSCENE(CUTSCENE_INTRO_PEACH, sCutsceneIntroPeach)
-        CUTSCENE(CUTSCENE_ENTER_BOWSER_ARENA, sCutsceneEnterBowserArena)
-        CUTSCENE(CUTSCENE_DANCE_ROTATE, sCutsceneDanceDefaultRotate)
-        CUTSCENE(CUTSCENE_DANCE_DEFAULT, sCutsceneDanceDefaultRotate)
-        CUTSCENE(CUTSCENE_DANCE_FLY_AWAY, sCutsceneDanceFlyAway)
-        CUTSCENE(CUTSCENE_DANCE_CLOSEUP, sCutsceneDanceCloseup)
-        CUTSCENE(CUTSCENE_KEY_DANCE, sCutsceneKeyDance)
-        CUTSCENE(CUTSCENE_0F_UNUSED, sCutsceneUnused)
-        CUTSCENE(CUTSCENE_END_WAVING, sCutsceneEndWaving)
-        CUTSCENE(CUTSCENE_CREDITS, sCutsceneCredits)
-        CUTSCENE(CUTSCENE_CAP_SWITCH_PRESS, sCutsceneCapSwitchPress)
-        CUTSCENE(CUTSCENE_SLIDING_DOORS_OPEN, sCutsceneSlidingDoorsOpen)
-        CUTSCENE(CUTSCENE_PREPARE_CANNON, sCutscenePrepareCannon)
-        CUTSCENE(CUTSCENE_UNLOCK_KEY_DOOR, sCutsceneUnlockKeyDoor)
-        CUTSCENE(CUTSCENE_STANDING_DEATH, sCutsceneStandingDeath)
-        CUTSCENE(CUTSCENE_ENTER_POOL, sCutsceneEnterPool)
-        CUTSCENE(CUTSCENE_DEATH_ON_STOMACH, sCutsceneDeathStomach)
-        CUTSCENE(CUTSCENE_DEATH_ON_BACK, sCutsceneDeathOnBack)
-        CUTSCENE(CUTSCENE_QUICKSAND_DEATH, sCutsceneQuicksandDeath)
-        CUTSCENE(CUTSCENE_SUFFOCATION_DEATH, sCutsceneSuffocation)
-        CUTSCENE(CUTSCENE_EXIT_BOWSER_SUCC, sCutsceneExitBowserSuccess)
-        CUTSCENE(CUTSCENE_EXIT_BOWSER_DEATH, sCutsceneExitBowserDeath)
-        CUTSCENE(CUTSCENE_EXIT_SPECIAL_SUCC, sCutsceneExitSpecialSuccess)
-        CUTSCENE(CUTSCENE_EXIT_WATERFALL, sCutsceneExitWaterfall)
-        CUTSCENE(CUTSCENE_EXIT_FALL_WMOTR, sCutsceneFallToCastleGrounds)
-        CUTSCENE(CUTSCENE_NONPAINTING_DEATH, sCutsceneNonPaintingDeath)
-        CUTSCENE(CUTSCENE_DIALOG, sCutsceneDialog)
-        CUTSCENE(CUTSCENE_READ_MESSAGE, sCutsceneReadMessage)
-        CUTSCENE(CUTSCENE_RACE_DIALOG, sCutsceneDialog)
-        CUTSCENE(CUTSCENE_ENTER_PYRAMID_TOP, sCutsceneEnterPyramidTop)
-        CUTSCENE(CUTSCENE_SSL_PYRAMID_EXPLODE, sCutscenePyramidTopExplode)
-    }
-
-#undef CUTSCENE
-
-    if ((cutsceneDuration != 0) && !(gCutsceneTimer & CUTSCENE_STOP)) {
-        //! @bug This should check for 0x7FFF (CUTSCENE_LOOP)
-        //! instead, cutscenes that last longer than 0x3FFF frames will never end on their own
-        if (gCutsceneTimer < 0x3FFF) {
-            gCutsceneTimer += 1;
-        }
-        //! Because gCutsceneTimer is often set to 0x7FFF (CUTSCENE_LOOP), this conditional can only
-        //! check for == due to overflow
-        if (gCutsceneTimer == cutsceneDuration) {
-            sCutsceneShot += 1;
-            gCutsceneTimer = 0;
-        }
-    } else {
-        sMarioCamState->cameraEvent = 0;
-        sCutsceneShot = 0;
-        gCutsceneTimer = 0;
-    }
-
-    sAreaYawChange = 0;
-
-    // The cutscene just ended
-    if ((c->cutscene == 0) && (oldCutscene != 0)) {
-        gRecentCutscene = oldCutscene;
-    }
-}
-
-/**
- * Call the event while `start` <= gCutsceneTimer <= `end`
- * If `end` is -1, call for the rest of the shot.
- */
-s32 cutscene_event(CameraEvent event, struct Camera *c, s16 start, s16 end) {
-    if (start <= gCutsceneTimer) {
-        if (end == -1 || end >= gCutsceneTimer) {
-            event(c);
-        }
-    }
-    return 0;
-}
-
-/**
- * Set gCutsceneObjSpawn when gCutsceneTimer == `frame`.
- *
- * @see intro_scene.inc.c for details on which objects are spawned.
- */
-s32 cutscene_spawn_obj(u32 obj, s16 frame) {
-    if (frame == gCutsceneTimer) {
-        gCutsceneObjSpawn = obj;
-    }
-    return 0;
-}
-
 /**
  * Start shaking the camera's field of view.
  *
@@ -11372,9 +6853,9 @@ void shake_camera_fov(struct GraphNodePerspective *perspective) {
     }
 }
 
-static UNUSED void unused_deactivate_sleeping_camera(UNUSED struct MarioState *m) {
-    sStatusFlags &= ~CAM_FLAG_SLEEPING;
-}
+// static UNUSED void unused_deactivate_sleeping_camera(UNUSED struct MarioState *m) {
+//     sStatusFlags &= ~CAM_FLAG_SLEEPING;
+// }
 
 void set_fov_30(UNUSED struct MarioState *m) {
     sFOVState.fov = 30.f;
@@ -11421,11 +6902,6 @@ void fov_default(struct MarioState *m) {
     }
 }
 
-//??! Literally the exact same as below
-static UNUSED void unused_approach_fov_30(UNUSED struct MarioState *m) {
-    camera_approach_f32_symmetric_bool(&sFOVState.fov, 30.f, 1.f);
-}
-
 void approach_fov_30(UNUSED struct MarioState *m) {
     camera_approach_f32_symmetric_bool(&sFOVState.fov, 30.f, 1.f);
 }
@@ -11530,20 +7006,6 @@ void set_fov_function(u8 func) {
     sFOVState.fovFunc = func;
 }
 
-/**
- * Start a preset fov shake. Used in cutscenes
- */
-void cutscene_set_fov_shake_preset(u8 preset) {
-    switch (preset) {
-        case 1:
-            set_fov_shake(0x100, 0x30, 0x8000);
-            break;
-        case 2:
-            set_fov_shake(0x400, 0x20, 0x4000);
-            break;
-    }
-}
-
 /**
  * Start a preset fov shake that is reduced by the point's distance from the camera.
  * Used in set_camera_shake_from_point
@@ -11567,27 +7029,6 @@ void set_fov_shake_from_point_preset(u8 preset, f32 posX, f32 posY, f32 posZ) {
     }
 }
 
-/**
- * Offset an object's position in a random direction within the given bounds.
- */
-static UNUSED void unused_displace_obj_randomly(struct Object *o, f32 xRange, f32 yRange, f32 zRange) {
-    f32 rnd = random_float();
-
-    o->oPosX += (rnd * xRange - xRange / 2.f);
-    o->oPosY += (rnd * yRange - yRange / 2.f);
-    o->oPosZ += (rnd * zRange - zRange / 2.f);
-}
-
-/**
- * Rotate an object in a random direction within the given bounds.
- */
-static UNUSED void unused_rotate_obj_randomly(struct Object *o, f32 pitchRange, f32 yawRange) {
-    f32 rnd = random_float();
-
-    o->oMoveAnglePitch += (s16)(rnd * pitchRange - pitchRange / 2.f);
-    o->oMoveAngleYaw += (s16)(rnd * yawRange - yawRange / 2.f);
-}
-
 /**
  * Rotate the object towards the point `point`.
  */
diff --git a/src/game/camera.h b/src/game/camera.h
index 7d1d83a2..97730804 100644
--- a/src/game/camera.h
+++ b/src/game/camera.h
@@ -750,9 +750,7 @@ void play_sound_button_change_blocked(void);
 void play_sound_rbutton_changed(void);
 void play_sound_if_cam_switched_to_lakitu_or_mario(void);
 s32 radial_camera_input(struct Camera *c, UNUSED f32 unused);
-s32 trigger_cutscene_dialog(s32 trigger);
 void handle_c_button_movement(struct Camera *c);
-void start_cutscene(struct Camera *c, u8 cutscene);
 u8 get_cutscene_from_mario_status(struct Camera *c);
 void warp_camera(f32 displacementX, f32 displacementY, f32 displacementZ);
 void approach_camera_height(struct Camera *c, f32 goal, f32 inc);
@@ -774,7 +772,6 @@ void set_fov_shake(s16 amplitude, s16 decay, s16 shakeSpeed);
 
 void set_fov_function(u8 func);
 void set_fov_45(void);
-void cutscene_set_fov_shake_preset(u8 preset);
 void set_fov_shake_from_point_preset(u8 preset, f32 posX, f32 posY, f32 posZ);
 void obj_rotate_towards_point(struct Object *o, Vec3f point, s16 pitchOff, s16 yawOff, s16 pitchDiv, s16 yawDiv);
 
